import os
import sqlite3
import random

import aiogram.utils.keyboard
import requests
from requests.exceptions import RequestException

from aiogram import F,Bot, Router # F –¥–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–Ω –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—Å—ë (–∫–∞—Ä—Ç–∏–Ω–∫–∏, —Å—Ç–∏–∫–µ—Ä—ã, –∫–æ–Ω—Ç–∞–∫—Ç—ã))
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import FSInputFile, InputMediaPhoto

from config import TOKEN

bot = Bot(token = TOKEN)

def get_conversion_rate():
    try:
        url = 'https://api.binance.com/api/v3/ticker/price?symbol=USDTRUB'
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        return float(response.json()['price'])
    except RequestException:
        return None


def convert_rubles_to_dollars(rubles: float)-> float or None:
    rate = get_conversion_rate()
    if rate is not None:
        try:
            dollars = rubles / rate
            return dollars
        except ZeroDivisionError:
            return 0
    return None


def generate_captcha(user_id: int, id_owner: int):
    a = random.randint(1, 10)
    b = random.randint(1, 10)
    op = random.choice(['+', '-','*'])
    question = f"{a} {op} {b} = ?"
    answer = eval(str(a) + op + str(b)) # –ò—Å–ø–æ–ª—å–∑—É–µ–º eval –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT * FROM captcha WHERE id = ?", (user_id,))
    result_from_db = cursor.fetchone() # –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    if result_from_db:
        cursor.execute(f"UPDATE captcha SET answer = ? WHERE id = ?", (int(answer), user_id))
    else:
        cursor.execute(f"INSERT INTO captcha (id,answer,id_owner) VALUES (?, ?, ?)", (user_id, int(answer), id_owner))
    connection.commit()  # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    connection.close()
    return question

def get_info_user(user_id: int) -> str:
    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()

    cursor.execute(f"SELECT id FROM users WHERE owner_id = ?", (user_id,))
    all_referral_db = cursor.fetchall()  # –≤–æ–∑—å–º—ë—Ç –≤—Å–µ –∏–º–µ—é—â–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏

    cursor.execute(f"SELECT id FROM users WHERE owner_id = ? AND level > 0", (user_id,))
    all_active_referral_db = cursor.fetchall()

    cursor.execute(
        f"SELECT level, balance, selected_currency, total_earned, referral_url, referral_code, user_name, withdrawal_balance"
        f" FROM users WHERE id = ?",
        (user_id,))
    info = cursor.fetchone()  # –ø–æ–ª—É—á–∏–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é

    cursor.execute(f"SELECT percent_one_level FROM levels WHERE level = ?", (info[0],))
    percent = cursor.fetchone()
    connection.close()

    if info[6]: # –µ—Å–ª–∏ –µ—Å—Ç—å –∏–º—è
        name = f'@{info[6]}'
    else:
        name = ' '

    all_referral = 0  # –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    all_active_referral = 0  # –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

    withdrawal_balance = (info[7] * 3) / 100  # —Å—É–º–º–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã—á–µ—Å—Ç—å –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    withdrawal_balance = info[7] - withdrawal_balance  # —Å—É–º–º–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ (–≤ —Ä—É–±–ª—è—Ö)
    sum_input_in_dollars = convert_rubles_to_dollars(withdrawal_balance)  # —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
    sum_in_dollars = convert_rubles_to_dollars(info[1])  # —Å—É–º–º–∞ –±–∞–ª–∞–Ω—Å–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö

    sum_input_in_dollars = round(sum_input_in_dollars, 2)  # —Å–æ–∫—Ä–∞—â–∞–µ–º –∑–Ω–∞–∫–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    sum_in_dollars = round(sum_in_dollars, 2)

    for _ in all_referral_db:
        all_referral += 1

    for _ in all_active_referral_db:
        all_active_referral += 1

    if sum_in_dollars:
        if info[2] == 'RUB':
            balance_string = f'{float(info[1])}‚ÇΩ ({sum_in_dollars}$)'
            withdrawal_balance_string = f'{withdrawal_balance}‚ÇΩ ({sum_input_in_dollars}$)'
        else:
            balance_string = f'{sum_in_dollars}$ ({float(info[1])}‚ÇΩ)'
            withdrawal_balance_string =  f'{sum_input_in_dollars}$ ({withdrawal_balance}‚ÇΩ)'
    else:
        balance_string = f'{float(info[1])}‚ÇΩ'
        withdrawal_balance_string = f'{withdrawal_balance}‚ÇΩ'

    message_text = (f'ü™™ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n'
                    f'‚îú –ù–∏–∫–Ω–µ–π–º: @{name}\n'
                    f'‚îú ID: {user_id}\n'
                    f'‚îú –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {all_referral}\n'
                    f'‚îú –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {all_active_referral}\n'
                    f'‚ï∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –Ω–∞–º–∏: {info[3]}\n'
                    f'\n'
                    f'‚Ä¢ –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n'
                    f'‚îú –õ–∏—á–Ω–∞—è –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: <code>{info[5]}</code>\n'
                    f'‚ï∞ –õ–∏—á–Ω–∞—è —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞: <a href="https://t.me/parser_premium_bot?start=1028495731">–∑–∞–∂–º–∏—Ç–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</a>\n'
                    f'\n'
                    f'‚Ä¢ –õ–∏—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å\n'
                    f'‚îú –£—Ä–æ–≤–µ–Ω—å: {info[0]}\n'
                    f'‚ï∞ –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞: {percent[0]}\n'
                    f'\n'
                    f'üí∏ –§–∏–Ω–∞–Ω—Å—ã\n'
                    f'‚îú –ë–∞–ª–∞–Ω—Å: {balance_string}\n'
                    f'‚ï∞ –ù–∞ –≤—ã–≤–æ–¥–µ: {withdrawal_balance_string}')

    return message_text

def show_message_for_all_mailing(user_id: int)-> list:
    # str –ø–µ—Ä–≤—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    # str –≤—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, —Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–æ—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ)

    message_for_user = '–¢–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n'
    directory = f'../working_file/file_for_mailing/{user_id}'

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT message, use_file FROM mailing WHERE id = ?", (user_id,))
    mailing_info = cursor.fetchone()  # –≤–æ–∑—å–º—ë—Ç –≤—Å–µ –∏–º–µ—é—â–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏
    connection.close()

    message_for_user += mailing_info[0]

    if mailing_info[1] == 1:
        if os.path.exists(directory) and os.path.isdir(directory):

            files = os.listdir(directory)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ

            for file in files:
                _, ext = os.path.splitext(file)  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                ext = ext.lower()  # –ü—Ä–∏–≤–æ–¥–∏–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞

                if ext in ['.jpg', '.jpeg', '.png', '.gif']:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    message_for_user += '\n\n–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é —Ñ–æ—Ç–æ'

                    photo_path = f'../working_file/file_for_mailing/{user_id}/' + file

                    return [message_for_user, photo_path]
                else:
                    pass
        else:
            pass
    else:
        pass
    return [message_for_user, '']

async def edit_or_answer_message(chat_id: int, message_id: int, text: str, photo_path: str = None,
                                 reply_markup:  aiogram.utils.keyboard.InlineKeyboardMarkup = None)-> int:
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –Ω–æ–≤–æ–≥–æ –∏–ª–∏ –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    try:
        if photo_path: # –æ—Ç—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            media = InputMediaPhoto(media=photo_path, caption=text, parse_mode="HTML")
            bot_message = await bot.edit_message_media(chat_id=chat_id, message_id=message_id, media=media,
                                                       reply_markup=reply_markup, )
        else:
            bot_message = await bot.edit_message_text(chat_id=chat_id,message_id=message_id,text=text,
                                                      reply_markup= reply_markup,parse_mode="HTML")
    except TelegramBadRequest as e:
        if "message is not modified" in str(e): # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ
            return message_id

        try: # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.delete_message(chat_id= chat_id,message_id=message_id)
        except TelegramBadRequest:
            pass

        if photo_path:
            bot_message = await bot.send_photo(chat_id=chat_id, caption=text, reply_markup=reply_markup,
                                                 photo=FSInputFile(photo_path),parse_mode='HTML')
        else:
            bot_message = await bot.send_message(chat_id=chat_id, text=text,reply_markup= reply_markup, parse_mode= "HTML")

    return bot_message.message_id


async def send_new_message(chat_id: int, text: str, photo_path: str = None,
                           reply_markup:  aiogram.utils.keyboard.InlineKeyboardMarkup = None)-> int:
    """"–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ—Å–ª–∞–Ω–æ, —Ç–æ –≤–µ—Ä–Ω—ë—Ç—Å—è –µ–≥–æ ID"""
    try:
        if photo_path:
            bot_message = await bot.send_photo(chat_id=chat_id, caption=text, reply_markup=reply_markup,
                                                 photo=FSInputFile(photo_path),parse_mode='HTML')
        else:
            bot_message = await bot.send_message(chat_id=chat_id, text=text,reply_markup= reply_markup, parse_mode= "HTML")

        return bot_message.message_id
    except TelegramBadRequest:
        pass




import asyncio
import sqlite3
import random
import string

from app.general_def import generate_captcha,get_conversion_rate, convert_rubles_to_dollars, get_info_user, show_message_for_all_mailing, edit_or_answer_message

from aiogram import F,Bot, Router # F –¥–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–Ω –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—Å—ë (–∫–∞—Ä—Ç–∏–Ω–∫–∏, —Å—Ç–∏–∫–µ—Ä—ã, –∫–æ–Ω—Ç–∞–∫—Ç—ã))
from aiogram.filters import CommandStart, Command # CommandStart –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É '/start'   Command –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∫–æ—Ç–æ—Ä—É—é –º—ã —Å–∞–º–∏ –º–æ–∂–µ–º –ø—Ä–∏–¥—É–º–∞—Ç—å (–Ω–∏–∂–µ –µ—Å—Ç—å –ø—Ä–∏–º–µ—Ä)
from aiogram.types import Message, CallbackQuery
from aiogram import types
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext # –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏

import app.keyboards as kb # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Å–æ–∫—Ä–∞—â–∞–µ–º –µ—ë –Ω–∞ 'kb'

from config import TOKEN, CHANNEL_URL,CHANNEL_NAME, CRYSTAL_API_LOGIN, CRYSTAL_API_SECRETKEY1, CRYSTAL_API_SECRETKEY2

from crystalpay_sdk import CrystalPAY, PayoffSubtractFrom, InvoiceType # –∫–∞—Å—Å–∞
crystalpayAPI = CrystalPAY(CRYSTAL_API_LOGIN, CRYSTAL_API_SECRETKEY1, CRYSTAL_API_SECRETKEY2)

bot = Bot(token = TOKEN)

router = Router() # —ç—Ç–æ –ø–æ—á—Ç–∏ –∫–∞–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è handlers

class Form(StatesGroup): # —ç—Ç–æ—Ç –∫–ª–∞—Å—Å —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–ø—Ä–æ—Å –≤–≤–µ—Å—Ç–∏ –∫–∞–Ω–∞–ª –¥—è–ª –ø–∞—Ä—Å–∏–Ω–≥–∞
    waiting_for_answer = State()
    captcha = State()
    ref_code = State()
    id_for_info = State()
    change_level = State()
    mailing_all_message = State()
    photo_for_mailing = State()
    add_admin = State()
    delete_admin = State()


@router.message(CommandStart())
async  def cmd_start(message: Message, state: FSMContext):
    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT id FROM users WHERE id = ?", (message.from_user.id,))
    result = cursor.fetchone()  # –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É

    ref_id = message.text.split(maxsplit=1)# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ ID –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    if len(ref_id) > 1 and ref_id[1].isdigit():
        ref_id = int(ref_id[1])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        cursor.execute(f"SELECT id FROM users WHERE id = ?", (ref_id,))
        owner_id = cursor.fetchone()
        if not owner_id: # –µ—Å–ª–∏ –ù–ï–¢ id –∫–æ—Ç–æ—Ä–æ–µ —É–∫–∞–∑–∞–Ω–Ω–æ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
            ref_id = 0
    else: # –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞
        ref_id = 0

    connection.close()

    if result: # –µ—Å–ª–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ
        await edit_or_answer_message(chat_id=message.from_user.id,message_id= 0,
                                     photo_path='../working_file/photo_for_message/start_message.png',
                                   text=f'–ü—Ä–∏–≤–µ—Ç <b>{message.from_user.username}</b>!\n–í–∞—à id: <b>'
                                   f'{message.from_user.id}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é üëá',
                                   reply_markup = await kb.main_menu(message.from_user.id) )
    elif ref_id == 0:
        bot_message = await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç <b>{message.from_user.username}</b>!\n\n–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–µ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º',
            parse_mode="HTML")
        await state.update_data(bot_message_id=bot_message.message_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
        await state.set_state(Form.ref_code)
    else:
        captcha = generate_captcha(message.from_user.id, ref_id)
        bot_message = await message.answer(f'–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É\n\n<b>{captcha}</b>',
                                    parse_mode="HTML")
        await state.update_data(bot_message_id=bot_message.message_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
        await state.set_state(Form.captcha)  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞

@router.message(Form.ref_code)
async def input_ref_code(message: types.Message, state: FSMContext):
    data = await state.get_data()
    bot_message_id = data["bot_message_id"]  # —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—ç—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–æ—Å–ª–∞–ª –±–æ—Ç)
    await state.clear()

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT id FROM users WHERE referral_code = ?", (message.text,))
    id_owner = cursor.fetchone()  # –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    connection.close()

    try: # —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    except TelegramBadRequest:  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
        pass

    if id_owner:
        captcha = generate_captcha(message.from_user.id, id_owner[0])
        message_id = await edit_or_answer_message(chat_id = message.from_user.id,message_id = bot_message_id,
                                     text = f'–ü—Ä–∏–≤–µ—Ç <b>{message.from_user.username}</b>!\n'
                                    f'–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É\n\n<b>{captcha}</b>')

        await state.update_data(bot_message_id=message_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
        await state.set_state(Form.captcha)  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    else:
        message_id = await edit_or_answer_message(chat_id=message.from_user.id,
                                                  message_id=bot_message_id,
                                                  text=f'‚ö†Ô∏è <b>–í–≤–µ–¥—ë–Ω–Ω—ã–π –≤–∞–º–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n'
                                                       f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º',)

        await state.update_data(bot_message_id=message_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
        await state.set_state(Form.ref_code)

@router.message(Form.captcha)
async def captcha(message: types.Message, state: FSMContext):
    data = await state.get_data()
    bot_message_id = data["bot_message_id"]  # —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—ç—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–æ—Å–ª–∞–ª –±–æ—Ç)
    await state.clear()

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT answer, id_owner FROM captcha WHERE id = ?", (message.from_user.id,))
    from_db = cursor.fetchone()  # –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    connection.close()

    try: # —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    except TelegramBadRequest:  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
        pass

    answer = 0

    try:
        answer = int(message.text)
    except ValueError:
        captcha = generate_captcha(message.from_user.id, 0)
        message_id = await edit_or_answer_message(chat_id=message.chat.id, message_id=bot_message_id,
                                                  text=f'‚ö†Ô∏è –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –µ—â—ë —Ä–∞–∑\n\n<b>{captcha}</b>',)

        await state.update_data(bot_message_id=message_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
        await state.set_state(Form.captcha)
        return

    if answer == from_db[0]: # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –±—ã–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
        bot_info = await bot.get_me()

        while True:
            random_string = ''.join(random.choice(string.digits) for _ in range(5)) # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–µ —á–∏—Å–ª–∞ (5 —Å–∏–º–≤–æ–ª–æ–≤)
            random_string += ':'
            random_string += ''.join(random.choice(string.ascii_uppercase) for _ in range(5)) # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –±—É–∫–≤—ã (5 —Å–∏–º–≤–æ–ª–æ–≤)

            connection = sqlite3.connect('../working_file/data_base.sqlite3')
            cursor = connection.cursor()
            cursor.execute(f"SELECT referral_code FROM users WHERE referral_code = ?", (random_string,))
            referral_code = cursor.fetchone()  # –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
            connection.close()

            if referral_code: # –µ—Å–ª–∏ —Ç–∞–∫–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —É–∂–µ –µ—Å—Ç—å
                pass
            else:
                break

        connection = sqlite3.connect('../working_file/data_base.sqlite3')
        cursor = connection.cursor()
        cursor.execute(f"INSERT INTO create_withdrawal (id) VALUES (?)",(message.from_user.id,))
        cursor.execute(f"INSERT INTO message_for_change (id) VALUES (?)",(message.from_user.id,))
        cursor.execute(f"INSERT INTO message_for_delete (id) VALUES (?)",(message.from_user.id,))
        cursor.execute(f"INSERT INTO users (id, user_name, owner_id, referral_url, referral_code) VALUES (?, ?, ?, ?, ?)",
                       (message.from_user.id,message.from_user.username, from_db[1],
                        f"https://t.me/{bot_info.username}?start={message.from_user.id}", random_string))
        cursor.execute(f'UPDATE message_for_delete SET message_id = ? WHERE id = ?', (0,message.from_user.id))
        connection.commit()  # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        connection.close()
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É

        await edit_or_answer_message( chat_id = message.chat.id,message_id = bot_message_id,
                                 text = f'‚öôÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ—Å—É—Ä—Å—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ '
                                f'–ù–∞—à –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –∏ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º. (http://t.me/durov)',
                                reply_markup = kb.subscription_verification)
    else:
        captcha = generate_captcha(message.from_user.id, 0 )

        message_id = await edit_or_answer_message(chat_id = message.chat.id,message_id = bot_message_id,
                                 text = f'‚ö†Ô∏è –í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –µ—â—ë —Ä–∞–∑\n\n<b>{captcha}</b>',)

        await state.update_data(bot_message_id=message_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
        await state.set_state(Form.captcha)
    connection.close()

@router.callback_query(F.data == 'subscription_verification')
async def subscription_verification(callback: CallbackQuery, state: FSMContext):
    await state.clear()

    member = await bot.get_chat_member(chat_id=CHANNEL_NAME, user_id=callback.from_user.id)
    if member.status in ["left", "kicked"]:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª
        await callback.answer(f'–í–Ω–∏–º–∞–Ω–∏–µ!\n–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª:\n\n{CHANNEL_URL}',show_alert = True,parse_mode= 'HTML')
    else:
        try:
            await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        except TelegramBadRequest:  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
            pass

        await callback.answer('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!',show_alert = False,parse_mode= 'HTML')

        new_message = await callback.message.answer('üïì –ó–ê–ì–†–£–ó–ö–ê: 10% / 100%\n[üüßÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏è]',)
        await asyncio.sleep(0.15)
        await new_message.edit_text('üïê –ó–ê–ì–†–£–ó–ö–ê: 20,32% / 100%\n[üüßüüßÔ∏èÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏è]',)
        await asyncio.sleep(0.15)
        await new_message.edit_text('üïï –ó–ê–ì–†–£–ó–ö–ê: 30,85% / 100%\n[üüßüüßüüßÔ∏è‚ñ´Ô∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏è]')
        await asyncio.sleep(0.15)
        await new_message.edit_text('üïô –ó–ê–ì–†–£–ó–ö–ê: 40,76% / 100%\n[üüßüüßüüßüüßÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏è]')
        await asyncio.sleep(0.15)
        await new_message.edit_text('üïì –ó–ê–ì–†–£–ó–ö–ê: 50,44% / 100%\n[üüßüüßüüßüüßüüßÔ∏èÔ∏è‚ñ´Ô∏è‚ñ´Ô∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏è]')
        await asyncio.sleep(0.15)
        await new_message.edit_text('üïú –ó–ê–ì–†–£–ó–ö–ê: 60,21% / 100%\n[üüßüüßüüßüüßüüßüüßÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏è]')
        await asyncio.sleep(0.15)
        await new_message.edit_text('üïü –ó–ê–ì–†–£–ó–ö–ê: 70,95% / 100%\n[üüßüüßüüßüüßüüßüüßüüßÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏è]')
        await asyncio.sleep(0.15)
        await new_message.edit_text('üï£ –ó–ê–ì–†–£–ó–ö–ê: 80,54% / 100%\n[üüßüüßüüßüüßüüßüüßüüßüüßÔ∏è‚ñ´Ô∏èÔ∏è‚ñ´Ô∏è]')
        await asyncio.sleep(0.15)
        await new_message.edit_text('üï• –ó–ê–ì–†–£–ó–ö–ê: 90,03% / 100%\n[üüßüüßüüßüüßüüßüüßüüßüüßüüßÔ∏èÔ∏è‚ñ´Ô∏èÔ∏è]')
        await asyncio.sleep(0.15)
        await new_message.edit_text('üïß –ó–ê–ì–†–£–ó–ö–ê: 100% / 100%\n[üüßüüßüüßüüßüüßüüßüüßüüßüüßüüß]')
        await asyncio.sleep(0.15)
        await new_message.edit_text('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É –≤ –±–æ—Ç–µ', reply_markup= kb.select_currency)

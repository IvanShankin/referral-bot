import asyncio
import sqlite3
import re

from app.general_def import get_info_user, edit_or_answer_message

from datetime import datetime as dt
from aiogram import F,Bot, Router, types
from aiogram.types import CallbackQuery
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext # –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏

import app.keyboards as kb # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Å–æ–∫—Ä–∞—â–∞–µ–º –µ—ë –Ω–∞ 'kb'

from config import TOKEN, BOT_URL, CRYSTAL_API_LOGIN, CRYSTAL_API_SECRETKEY1, CRYSTAL_API_SECRETKEY2, CRYPTO_TOKEN, ADMIN_CHAT_ID

from crystalpay_sdk import CrystalPAY, InvoiceType # –∫–∞—Å—Å–∞
crystalpayAPI = CrystalPAY(CRYSTAL_API_LOGIN, CRYSTAL_API_SECRETKEY1, CRYSTAL_API_SECRETKEY2)

from aiocryptopay import AioCryptoPay, Networks # –ö–ë
crypto = AioCryptoPay(token=CRYPTO_TOKEN, network=Networks.TEST_NET) # –ö–ë

router = Router() # —ç—Ç–æ –ø–æ—á—Ç–∏ –∫–∞–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è handlers

bot = Bot(token = TOKEN)

class Form(StatesGroup): # —ç—Ç–æ—Ç –∫–ª–∞—Å—Å —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    replenishment_or_withdrawal = State()
    phone_or_number_card = State()
    bank = State()
    spb = State()
    another_bank = State()
    number_card = State()
    number_phone = State()

def is_possible_phone_number(phone: str) -> bool:
    # –£–¥–∞–ª—è–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ "+" (–µ—Å–ª–∏ –æ–Ω –≤ –Ω–∞—á–∞–ª–µ)
    cleaned = re.sub(r"[^\d+]", "", phone)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–∏–ª–∏ + –≤ –Ω–∞—á–∞–ª–µ)
    if not re.fullmatch(r"\+?\d{10,15}", cleaned):
        return False

    # –î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å "+", —Ç–æ –ø–æ—Å–ª–µ –Ω–µ–≥–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 11-15 —Ü–∏—Ñ—Ä
    if "+" in cleaned:
        return len(cleaned) >= 12  # +79161234567 ‚Üí 12 —Å–∏–º–≤–æ–ª–æ–≤
    else:
        return len(cleaned) >= 10  # 9161234567 ‚Üí 10 —Ü–∏—Ñ—Ä

# –æ–∂–∏–¥–∞–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ —Å—Ç–∞–≤–∏—Ç —Å—Ç–∞—Ç—É—Å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω
async def update_request_replenishment(order_id: int, waiting_time_in_seconds: int = 1800,):
    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –º–∏–Ω—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è
    await asyncio.sleep(waiting_time_in_seconds)
    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT status FROM replenishment_request WHERE id = ?", (order_id,))
    order_status = cursor.fetchone()
    connection.close()

    if order_status[0] == 'not_completed': # —É—Å—Ç–∞–Ω–æ–≤–∏–º —á—Ç–æ –ø–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω
        current_datetime = dt.now()
        formatted_time = current_datetime.strftime("%H:%M:%S %d-%m-%Y")

        connection = sqlite3.connect('../working_file/data_base.sqlite3')
        cursor = connection.cursor()
        cursor.execute(f"UPDATE replenishment_request SET status = ?,data_completion = ?  WHERE id = ?",
                       ('rejected', formatted_time, order_id))
        connection.commit()
        connection.close()

@router.callback_query(F.data.startswith('selected_currency_'))
async def select_currency(callback: CallbackQuery):
    currency = callback.data.split('_')[2]

    await callback.answer('–í–∞–ª—é—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞', show_alert=False,parse_mode= 'HTML')

    await edit_or_answer_message(photo_path='../working_file/photo_for_message/start_message.png',
                                 chat_id= callback.from_user.id,message_id=callback.message.message_id,
                                 text = f'–ü—Ä–∏–≤–µ—Ç <b>{callback.from_user.username}</b>!\n–í–∞—à id: <b>'
                                     f'{callback.from_user.id}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é üëá',
                                     reply_markup=await kb.main_menu(callback.from_user.id))

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"UPDATE users SET selected_currency = ? WHERE id = ?",(currency, callback.from_user.id))
    connection.commit()
    connection.close()


@router.callback_query(F.data == 'main_menu')
async def select_currency(callback: CallbackQuery):
    await edit_or_answer_message(photo_path='../working_file/photo_for_message/start_message.png',
                                chat_id=callback.from_user.id, message_id= callback.message.message_id,
                                text = f'–ü—Ä–∏–≤–µ—Ç <b>{callback.from_user.username}</b>!\n–í–∞—à id: <b>'
                                 f'{callback.from_user.id}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é üëá',
                                reply_markup = await kb.main_menu(callback.from_user.id))

@router.callback_query(F.data == 'profile')
async def profile(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    message_text = get_info_user(callback.from_user.id)
    await edit_or_answer_message(photo_path= '../working_file/photo_for_message/profile.png',chat_id= callback.from_user.id,message_id=callback.message.message_id,
                                text = message_text,reply_markup= kb.profile_keb)

@router.callback_query(F.data.startswith('money_'))
async def replenishment(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    choice = callback.data.split('_')[1]
    message_id = await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                 text=f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö\n\n–ú–∏–Ω–∏–º—É–º –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: 100—Ä—É–±.\n–ú–∏–Ω–∏–º—É–º –Ω–∞ –≤—ã–≤–æ–¥: 500—Ä—É–±.',
                                              reply_markup= kb.back_in_profile)

    await state.update_data(choice = choice,bot_message_id = message_id )
    await state.set_state(Form.replenishment_or_withdrawal)

@router.message(Form.replenishment_or_withdrawal)
async def id_for_info(message: types.Message, state: FSMContext):
    data = await state.get_data()
    bot_message_id = data["bot_message_id"]  # —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—ç—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–æ—Å–ª–∞–ª –±–æ—Ç)
    choice = data["choice"]
    await state.clear()

    try: # —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    except TelegramBadRequest:  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
        pass

    try:
        selected_sum = int(message.text)
    except ValueError:
        await edit_or_answer_message(chat_id=message.from_user.id, message_id=bot_message_id,
                                     text=f'‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!', reply_markup= kb.back_in_profile)
        await state.update_data(choice=choice, bot_message_id=bot_message_id)
        await state.set_state(Form.replenishment_or_withdrawal)
        return

    message_error = ''
    if selected_sum < 100 or selected_sum > 10000:
        message_error = ('‚ö†Ô∏è \n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 100—Ä—É–±!\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 500—Ä—É–±!\n'
                         '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 10000—Ä—É–±!')
    else:
        if choice == 'replenishment': # –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
            await edit_or_answer_message(chat_id=message.from_user.id, message_id=bot_message_id,
                                         text=f'–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è üëá',
                                         reply_markup=await kb.replenishment())
            connection = sqlite3.connect('../working_file/data_base.sqlite3')
            cursor = connection.cursor()
            cursor.execute(f"UPDATE create_withdrawal SET selected_sum = ? WHERE id = ?",(selected_sum, message.from_user.id))
            connection.commit()
            connection.close()
            return
        elif choice == 'withdrawal': # –≤—ã–≤–æ–¥
            connection = sqlite3.connect('../working_file/data_base.sqlite3')
            cursor = connection.cursor()
            cursor.execute(f"SELECT balance, withdrawal_balance FROM users WHERE id = ?", (message.from_user.id,))
            balances = cursor.fetchone()
            connection.close()

            if balances[0] < selected_sum:
                message_error = '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!\n\n–í–∞—à –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –≤—ã–≤–æ–¥–∞!'
            elif selected_sum < 500:
                message_error = '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 500—Ä—É–±!'
            elif (balances[0] - balances[1]) < selected_sum:
                message_error = ('‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!\n\n–£ –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç—É, –Ω–æ —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –∏'
                                 ' —É–∫–∞–∑–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–π—Å—è –±–∞–ª–∞–Ω—Å!\n\n–î–æ–∂–¥–∏—Ç–µ—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ—ë')
            else:
                await edit_or_answer_message(chat_id=message.from_user.id, message_id=bot_message_id,
                                             text=f'–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∞ üëá\n\n–í–Ω–∏–º–∞–Ω–∏–µ!\n–ü—Ä–∏ –≤—ã–≤–æ–¥–µ –±—É–¥–µ—Ç –≤–∑–∏–º–∞—Ç—å—Å—è –∫–æ–º–∏—Å—Å–∏—è –≤ 3%',
                                             reply_markup=await kb.withdrawal())
                connection = sqlite3.connect('../working_file/data_base.sqlite3')
                cursor = connection.cursor()
                cursor.execute(f"UPDATE create_withdrawal SET selected_sum = ? WHERE id = ?", (selected_sum, message.from_user.id))
                connection.commit()
                connection.close()
                return

    await edit_or_answer_message(chat_id=message.from_user.id, message_id=bot_message_id,text=message_error,
                                 reply_markup= kb.back_in_profile )
    await state.update_data(choice=choice, bot_message_id=bot_message_id)
    await state.set_state(Form.replenishment_or_withdrawal)
    return


@router.callback_query(F.data == 'history_transactions')
async def history_transactions(callback: CallbackQuery):
    await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                 text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é –∏—Å—Ç–æ—Ä–∏—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å üëá',
                                 reply_markup=kb.transaction_history)

@router.callback_query(F.data == 'history_profit')
async def history_profit(callback: CallbackQuery):
    await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                 text='–≠—Ç–æ –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\n'
                                      '–í–Ω–∏–º–∞–Ω–∏–µ! \n–æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π',
                                 reply_markup=await kb.history_replenishment(callback.from_user.id,'profit_from_referrals'))

@router.callback_query(F.data == 'history_replenishment')
async def history_replenishment(callback: CallbackQuery):
    await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                 text= '–≠—Ç–æ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —Å—á—ë—Ç–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\n'
                                       '–í–Ω–∏–º–∞–Ω–∏–µ! \n–æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π',
                                reply_markup=await kb.history_replenishment(callback.from_user.id,'replenishment_request'))

@router.callback_query(F.data == 'history_withdrawal')
async def history_withdrawal(callback: CallbackQuery):
    await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                 text='–≠—Ç–æ –∏—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–∞ –≤–∞—à–µ–≥–æ —Å—á—ë—Ç–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\n'
                                      '–í–Ω–∏–º–∞–Ω–∏–µ! \n–æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π',
                                 reply_markup=await kb.history_replenishment(callback.from_user.id,'withdrawal_requests'))

@router.callback_query(F.data.startswith('show_order_for_user|'))
async def show_order_for_user(callback: CallbackQuery):
    table = callback.data.split('|')[1]
    id_order = int(callback.data.split('|')[2])

    message_text = ''
    message_button = None # –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()

    if table == 'replenishment_request':
        cursor.execute(f"SELECT status, way, data_create, data_completion, sum, url, id_payment"
                       f"  FROM replenishment_request WHERE id = ?", (id_order,))
        order_info = cursor.fetchone()

        status = ''
        method = ''
        data_completion = ''
        if order_info[0] == 'not_completed':
            status = '–Ω–µ –æ–ø–ª–∞—á–µ–Ω'
        elif order_info[0] == 'completed':
            status = '–æ–ø–ª–∞—á–µ–Ω'
        elif order_info[0] == 'rejected':
            status = '–≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ'

        if order_info[1] == 'admin':
            method = '—á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞'
        elif order_info[1] == 'crystalPAY':
            method = '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (crystalPAY)'
        elif order_info[1] == 'cryptoBot':
            method = 'cryptoBot'

        if not order_info[3]:
            data_completion = '–Ω–µ –æ–∫–æ–Ω—á–µ–Ω'
        else:
            data_completion = order_info[3]

        message_text = (f'–ó–∞—è–≤–∫–∞ ‚Ññ{id_order}\n\n'
                        f'–°—É–º–º–∞: {order_info[4]}\n'
                        f'–°—Ç–∞—Ç—É—Å: {status}\n'
                        f'–ú–µ—Ç–æ–¥: {method}\n'
                        f'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order_info[2]}\n'
                        f'–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {data_completion}\n')

        if order_info[1] != 'admin': # —ç—Ç–æ –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –Ω–µ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –∞ —á–µ—Ä–µ–∑ crystalPAY –∏–ª–∏ cryptoBot
            if order_info[0] == 'not_completed':
                message_button = await kb.payment_verification(order_info[1],id_order,order_info[6], order_info[5],
                                                               'history_replenishment' )
            else:
                message_button = kb.back_in_history_replenishment
        else: # –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            message_button = await kb.payment_manager(back_button = 'history_replenishment')

    elif table == 'withdrawal_requests':
        cursor.execute(f"SELECT status, way, data_create, data_completion, sum, bank, phone_or_number_card, comment_on_refusal "
                       f"  FROM withdrawal_requests WHERE id = ?", (id_order,))
        order_info = cursor.fetchone()

        status = ''
        method = ''
        comment_on_refusal = ''
        bank = ''
        data_completion = ''
        if order_info[0] == 'not_completed':
            status = '–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞'
        elif order_info[0] == 'completed':
            status = '–≤—ã–≤–µ–¥–µ–Ω—ã'
        elif order_info[0] == 'rejected':
            status = '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ'

        if not order_info[3]:
            data_completion = '–Ω–µ –æ–∫–æ–Ω—á–µ–Ω'
        else:
            data_completion = order_info[3]

        if order_info[5]:
            if order_info[5] == 'sber':
                bank = '–ë–∞–Ω–∫: –°–±–µ—Ä–±–∞–Ω–∫\n'
            elif order_info[5] == 'alpha':
                bank = '–ë–∞–Ω–∫: –ê–ª—å—Ñ–∞\n'
            elif order_info[5] == 'Tbank':
                bank = '–ë–∞–Ω–∫: –¢ –±–∞–Ω–∫\n'
            elif order_info[5] == 'vtb':
                bank = '–ë–∞–Ω–∫: –í–¢–ë\n'
            elif order_info[5] == 'ozon':
                bank = '–ë–∞–Ω–∫: –û–∑–æ–Ω\n'
            else:
                bank = order_info[5] + '\n'

        if order_info[7]:
            comment_on_refusal = f'\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–∫–∞–∑–∞: {order_info[7]}'


        message_text = (f'–ó–∞—è–≤–∫–∞ ‚Ññ{id_order}\n\n'
                        f'–°—É–º–º–∞: {order_info[4]}\n'
                        f'–°—Ç–∞—Ç—É—Å: {status}\n'
                        f'{bank}'
                        f'–†–µ–∫–≤–∏–∑–∏—Ç—ã: {order_info[6]}\n'
                        f'–ú–µ—Ç–æ–¥: —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n'
                        f'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order_info[2]}\n'
                        f'–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {data_completion}'
                        f'{comment_on_refusal}')

        message_button = await kb.payment_manager(back_button = 'history_withdrawal')

    elif table == 'profit_from_referrals':
        cursor.execute(f"SELECT sum, id_referral, step_referral, return_percentage, date FROM profit_from_referrals WHERE id = ?",
                       (id_order,))
        order_info = cursor.fetchone()

        cursor.execute(f"SELECT user_name FROM users WHERE id = ?",(order_info[1],))
        referral_info = cursor.fetchone()


        if referral_info[0]: # –µ—Å–ª–∏ –µ—Å—Ç—å user_name
            user_name_referral = f'user_name —Ä–µ—Ñ–µ—Ä–∞–ª–∞: @{referral_info[0]}'
        else:
            user_name_referral = f'id —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {order_info[1]}'


        message_text = (f'–ó–∞—è–≤–∫–∞ ‚Ññ{id_order}\n\n'
                        f'–°—É–º–º–∞: {order_info[0]}\n'
                        f'{user_name_referral}\n'
                        f'–î–∞—Ç–∞: {order_info[4]}\n'
                        f'–°—Ç—É–ø–µ–Ω—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {order_info[2]}\n'
                        f'–ü—Ä–æ—Ü–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞: {order_info[3]}%')

        message_button = kb.back_in_history_profit

    connection.close()
    await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                 text=message_text,reply_markup=message_button)

@router.callback_query(F.data.startswith('replenishment_'))
async def replenishment(callback: CallbackQuery):
    way = callback.data.split('_')[1]

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT selected_sum FROM create_withdrawal WHERE id = ?", (callback.from_user.id,))
    selected_sum = cursor.fetchone()
    connection.close()

    current_datetime = dt.now()
    formatted_time = current_datetime.strftime("%H:%M:%S %d-%m-%Y")

    if selected_sum[0] < 100:
        await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                     text=f'‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 100—Ä—É–±!',
                                     reply_markup=kb.back_in_profile)
        return

    if way == 'bankMap':
        await edit_or_answer_message(chat_id= callback.from_user.id, message_id=callback.message.message_id,
                                     text=f'üí≥ –î–ª—è –≤—ã–¥–∞—á–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –Ω–∞ –æ–ø–ª–∞—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É\n'
                                          f'–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n'
                                          f'<code>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è —Ö–æ—á—É –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç –Ω–∞ {selected_sum[0]}'
                                          f' –º–æ–π id {callback.from_user.id}</code>',
                                     reply_markup=await kb.payment_manager())

    elif way == 'crystalPAY':
        invoice = crystalpayAPI.Invoice.create(
            amount=selected_sum[0],
            type_=InvoiceType.purchase,
            lifetime=30,  # 30 –º–∏–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Å—ã–ª–∫–∏
            description="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á—ë—Ç–∞ —É –±–æ—Ç–∞", # –¥–æ–ø–∏—Å–∞—Ç—å
            currency= "RUB",
            redirect_url= BOT_URL  # –°—Å—ã–ª–∫–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        )

        connection = sqlite3.connect('../working_file/data_base.sqlite3')
        cursor = connection.cursor()
        cursor.execute(f"INSERT INTO replenishment_request (id_payment,way,data_create,sum,url,id_customer) VALUES (?, ?, ?, ?, ?, ?)",
                       (invoice['id'],'crystalPAY', str(formatted_time), selected_sum[0],invoice['url'], callback.from_user.id))
        connection.commit()  # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        cursor.execute(f"SELECT id FROM replenishment_request WHERE id_payment = ? AND status = ?",
                       (invoice['id'],'not_completed'))
        order_id = cursor.fetchone()
        connection.close()

        await edit_or_answer_message(chat_id= callback.from_user.id, message_id=callback.message.message_id,
                                     text=f'üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n\n–°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 30 –º–∏–Ω—É—Ç',
                                     reply_markup= await kb.payment_verification('crystalPAY',
                                                                    order_id[0],invoice['id'],invoice['url']))

        await update_request_replenishment(order_id[0])
        # –∑–¥–µ—Å—å –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–Ω–æ–π –≤ txt —Ñ–∞–π–ª–µ
    elif way == 'cryptoBot':
        fiat_invoice = await crypto.create_invoice(amount=selected_sum[0],
                                                   fiat='RUB',
                                                   currency_type='fiat',
                                                   expires_in = 1800) # —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ 30 –º–∏–Ω—É—Ç

        connection = sqlite3.connect('../working_file/data_base.sqlite3')
        cursor = connection.cursor()
        cursor.execute(
            f"INSERT INTO replenishment_request (id_payment,way,data_create,sum,url,id_customer) VALUES (?, ?, ?, ?, ?, ?)",
            (str(fiat_invoice.invoice_id), 'cryptoBot', str(formatted_time), selected_sum[0], fiat_invoice.bot_invoice_url, callback.from_user.id))
        connection.commit()  # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        cursor.execute(f"SELECT id FROM replenishment_request WHERE id_payment = ? AND status = ?",
                       (str(fiat_invoice.invoice_id), 'not_completed'))
        order_id = cursor.fetchone()
        connection.close()

        await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                     text=f'üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n\n–°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 30 –º–∏–Ω—É—Ç',
                                     reply_markup=await kb.payment_verification('cryptoBot', order_id[0],
                                                        str(fiat_invoice.invoice_id), fiat_invoice.bot_invoice_url))

        await update_request_replenishment(order_id[0])


@router.callback_query(F.data.startswith('check_payment|'))
async def replenishment(callback: CallbackQuery):
    id_order = callback.data.split('|')[1]
    id_payment = callback.data.split('|')[2]
    method = callback.data.split('|')[3]

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT status FROM replenishment_request WHERE id = ? AND id_payment = ?",
                   (int(id_order), id_payment))
    order_status = cursor.fetchone()
    connection.close()

    if method == 'crystalPAY':
        info = crystalpayAPI.Invoice.getinfo(id_payment)
    elif method == 'cryptoBot':
        invoice = await crypto.get_invoices(invoice_ids= int(id_payment))
        info = {'state': invoice.status}
    else:
        info = {'state': 'rejected'}

    if order_status[0] == 'not_completed': # –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        if info['state'] == 'payed' or info['state'] == 'paid': # –µ—Å–ª–∏ –æ–ø–ª–∞—á–µ–Ω  (–≤—Ç–æ—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–±)
            current_datetime = dt.now()
            formatted_time = current_datetime.strftime("%H:%M:%S %d-%m-%Y")

            connection = sqlite3.connect('../working_file/data_base.sqlite3')
            cursor = connection.cursor()
            cursor.execute(f"SELECT balance FROM users WHERE id = ?",(callback.from_user.id,))
            balance = cursor.fetchone()
            new_balance = balance[0] + int(info['amount'])
            cursor.execute(f"UPDATE replenishment_request SET status = ?, data_completion = ? WHERE id = ? AND id_payment = ?",
                           ('completed',formatted_time, id_order, id_payment))
            cursor.execute(f"UPDATE users SET balance = ? WHERE id = ?", (new_balance,callback.from_user.id))
            connection.commit()
            connection.close()

            await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                         text=f'‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n–ù–∞ —Å—á—ë—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ: {info['amount']}RUB\n'
                                              f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance}RUB',
                                         reply_markup= kb.back_in_profile)
        else:
            await callback.answer('–ü–ª–∞—Ç—ë–∂ –Ω–µ –æ–ø–ª–∞—á–µ–Ω!', show_alert= True)
    elif order_status[0] == 'completed': # –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞—è–≤–∫–∞
        await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                     text=f'‚úÖ –°—á—ë—Ç —É–∂–µ –æ–ø–ª–∞—á–µ–Ω!\n\n–ù–∞ –Ω–µ–≥–æ –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ: {info['amount']}RUB',
                                     reply_markup=kb.back_in_profile)
    elif order_status[0] == 'rejected': # –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∑–∞—è–≤–∫–∞
        await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                     text=f'‚ùå <b>–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞!</b>\n\n–ó–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞',
                                     reply_markup=kb.back_in_profile)


@router.callback_query(F.data.startswith('withdrawal_'))
async def withdrawal(callback: CallbackQuery, state: FSMContext):
    way = callback.data.split('_')[1]

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT selected_sum FROM create_withdrawal WHERE id = ?", (callback.from_user.id,))
    selected_sum = cursor.fetchone()
    connection.close()

    if selected_sum[0] < 500:
        await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                     text=f'‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 500—Ä—É–±!',
                                     reply_markup=kb.back_in_profile)
        return

    if way == 'SBP':
        await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                     text=f'–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ üëá',reply_markup=kb.bank)
    elif way == 'bankMap':
        message_id = await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                     text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n\n'
                                          f'–ü—Ä–∏–º–µ—Ä: \n<code>2200 1523 8750 6719</code>',
                                     reply_markup=kb.back_in_profile)
        await state.update_data(bot_message_id= message_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
        await state.set_state(Form.number_card)

@router.callback_query(F.data.startswith('bank_'))
async def selected_bank(callback: CallbackQuery, state: FSMContext):
    bank = callback.data.split('_')[1]

    bank_for_db = ''
    if bank == 'sber':
        bank_for_db = '–°–±–µ—Ä–±–∞–Ω–∫'
    elif bank == 'alpha':
        bank_for_db = '–ê–ª—å—Ñ–∞'
    elif bank == 'Tbank':
        bank_for_db = '–¢ –±–∞–Ω–∫'
    elif bank == 'vtb':
        bank_for_db = '–í–¢–ë'
    elif bank == 'ozon':
        bank_for_db = '–û–∑–æ–Ω'
    elif bank == 'another': # –∫–æ–≥–¥–∞ –≤—ã–±—Ä–∞–ª–∏ –¥—Ä—É–≥–æ–π –±–∞–Ω–∫
        message_id = await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                                  text=f'–í–≤–µ–¥–∏—Ç–µ –ë–∞–Ω–∫',reply_markup=kb.back_in_profile)
        await state.update_data(bot_message_id=message_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
        await state.set_state(Form.another_bank)
        return

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"UPDATE create_withdrawal SET bank = ? WHERE id = ?",(bank_for_db, callback.from_user.id))
    connection.commit()
    connection.close()

    message_id = await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                              text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n\n'
                                                   f'–ü—Ä–∏–º–µ—Ä: \n<code>+7 952 543-72-19</code>',
                                              reply_markup=kb.back_in_profile)
    await state.update_data(bot_message_id=message_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
    await state.set_state(Form.number_phone)

@router.message(Form.another_bank)
async def another_bank(message: types.Message, state: FSMContext):
    data = await state.get_data()
    bot_message_id = data["bot_message_id"]  # —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—ç—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–æ—Å–ª–∞–ª –±–æ—Ç)
    await state.clear()

    try:
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    except TelegramBadRequest:  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
        pass

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"UPDATE create_withdrawal SET bank = ? WHERE id = ?",
                   (message.text, message.from_user.id))
    connection.commit()
    connection.close()

    message_id = await edit_or_answer_message(chat_id=message.from_user.id, message_id=bot_message_id,
                                              text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n\n'
                                                   f'–ü—Ä–∏–º–µ—Ä: \n<code>+7 952 543-72-19</code>',
                                              reply_markup=kb.back_in_profile)
    await state.update_data(bot_message_id=message_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
    await state.set_state(Form.number_phone)

@router.message(Form.number_phone)
async def number_phone(message: types.Message, state: FSMContext):
    data = await state.get_data()
    bot_message_id = data["bot_message_id"]  # —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—ç—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–æ—Å–ª–∞–ª –±–æ—Ç)
    await state.clear()

    try:
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    except TelegramBadRequest:  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
        pass

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"UPDATE create_withdrawal SET phone_or_number_card = ? WHERE id = ?",
                   (message.text, message.from_user.id))
    connection.commit()

    cursor.execute(f"SELECT bank, selected_sum FROM create_withdrawal WHERE id = ?",
                   (message.from_user.id,))
    info_order = cursor.fetchone()
    connection.close()

    sum_with_interest = (info_order[1] * 3) / 100  # —Å—É–º–º–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã—á–µ—Å—Ç—å –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    sum_with_interest = info_order[1] - sum_with_interest  # —Å—É–º–º–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏

    if is_possible_phone_number(message.text): # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
        await edit_or_answer_message(chat_id=message.from_user.id, message_id=bot_message_id,
                                     text=f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n'
                                          f'üí∏ –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {info_order[1]}\n'
                                          f'üí∏ –°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: {sum_with_interest}\n'
                                          f'üèõÔ∏è –ë–∞–Ω–∫: {info_order[0]}\n'
                                          f'üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {message.text}\n',
                                     reply_markup=kb.create_order_on_withdrawal)
    else:
        message_id = await edit_or_answer_message(chat_id=message.from_user.id, message_id=bot_message_id,
                                                  text=f'‚ùå –ù–æ–º–µ—Ä –≤–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\n\n'
                                                       f'–ü—Ä–∏–º–µ—Ä: \n<code>+7 952 543-72-19</code>',
                                                  reply_markup=kb.back_in_profile)
        await state.update_data(bot_message_id=message_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
        await state.set_state(Form.number_phone)


@router.message(Form.number_card)
async def number_card(message: types.Message, state: FSMContext):
    data = await state.get_data()
    bot_message_id = data["bot_message_id"]  # —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—ç—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–æ—Å–ª–∞–ª –±–æ—Ç)
    await state.clear()

    try:
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    except TelegramBadRequest:  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
        pass

    number_card_str = message.text.replace(" ", "")

    error_message = ''

    try:
        test = int(number_card_str)
        if len(number_card_str) != 16:
            error_message = '‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\n\n–ü—Ä–∏–º–µ—Ä: \n<code>+7 952 543-72-19</code>'
    except ValueError:
        error_message = '‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\n\n–ü—Ä–∏–º–µ—Ä: \n<code>+7 952 543-72-19</code>'

    if error_message:
        message_id = await edit_or_answer_message(chat_id=message.from_user.id, message_id=bot_message_id,
                                     text=error_message,reply_markup=kb.back_in_profile)
        await state.update_data(bot_message_id=message_id)
        await state.set_state(Form.number_card)
        return

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"UPDATE create_withdrawal SET phone_or_number_card = ?, bank = ? WHERE id = ?",
                   (message.text, None, message.from_user.id))
    connection.commit()

    cursor.execute(f"SELECT selected_sum FROM create_withdrawal WHERE id = ?",(message.from_user.id,))
    selected_sum = cursor.fetchone()
    connection.close()

    sum_with_interest = (selected_sum[0] * 3) / 100  # —Å—É–º–º–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã—á–µ—Å—Ç—å –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    sum_with_interest = selected_sum[0] - sum_with_interest  # —Å—É–º–º–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏

    await edit_or_answer_message(chat_id=message.from_user.id, message_id=bot_message_id,
                                 text=f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n'
                                      f'üí∏ –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {selected_sum[0]}\n'
                                      f'üí∏ –°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: {sum_with_interest}\n'
                                      f'üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {message.text}\n',
                                 reply_markup=kb.create_order_on_withdrawal)

@router.callback_query(F.data == 'confirm_order')
async def confirm_order(callback: CallbackQuery):
    current_datetime = dt.now()
    formatted_time = current_datetime.strftime("%H:%M:%S %d-%m-%Y")

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT balance, withdrawal_balance FROM users WHERE id = ?",(callback.from_user.id,))
    balances = cursor.fetchone()

    cursor.execute(f"SELECT phone_or_number_card, bank, selected_sum FROM create_withdrawal WHERE id = ?",
        (callback.from_user.id,))
    info_order = cursor.fetchone()

    message_error = ''
    if balances[0] < info_order[2]:
        message_error = '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!\n\n–í–∞—à –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –≤—ã–≤–æ–¥–∞!'
    elif info_order[2] < 500:
        message_error = '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 500—Ä—É–±!'
    elif (balances[0] - balances[1]) < info_order[2]:
        message_error = ('‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!\n\n–£ –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç—É, –Ω–æ —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –∏'
                         ' —É–∫–∞–∑–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–π—Å—è –±–∞–ª–∞–Ω—Å!\n\n–î–æ–∂–¥–∏—Ç–µ—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏')

    sum_with_interest = (info_order[2] * 3) / 100 # —Å—É–º–º–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã—á–µ—Å—Ç—å –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    sum_with_interest = info_order[2] - sum_with_interest # —Å—É–º–º–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏

    new_withdrawal_requests = balances[1] + info_order[2]

    if message_error:
        connection.close()
        await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                     text=message_error,reply_markup=kb.back_in_profile)
        return

    cursor.execute(f"INSERT INTO withdrawal_requests (way,sum,data_create, bank, phone_or_number_card, id_customer)"
                   f" VALUES (?,?,?,?,?,?)", ('admin',info_order[2], formatted_time, info_order[1], info_order[0],
                                                         callback.from_user.id))
    cursor.execute(f"UPDATE users SET withdrawal_balance = ? WHERE id = ?",(new_withdrawal_requests, callback.from_user.id))
    connection.commit()

    cursor.execute(f"SELECT id FROM withdrawal_requests WHERE id_customer = ? AND data_create = ?",
        (callback.from_user.id,formatted_time))
    id_order = cursor.fetchone()

    connection.close()



    await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                 text=f'‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º\n\n'
                                      f'–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç 5 –º–∏–Ω—É—Ç –¥–æ 24 —á–∞—Å–æ–≤\n'
                                      f'–í–∞–º –ø—Ä–∏–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–≤–æ–¥–µ',
                                 reply_markup=kb.back_in_profile)

    try: # –≤—ã–≤–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç —Å –∞–¥–º–∏–Ω–∞–º–∏
        await bot.send_message(chat_id=ADMIN_CHAT_ID,
                               text=f'ID –∑–∞—è–≤–∫–∏:  /order_id_{id_order[0]}_\n\n'
                                    f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:  /user_id_{callback.from_user.id}_\n'
                                    f'user_name –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{callback.from_user.username}\n\n'
                                    f'üí∏ –°—É–º–º–∞: <code>{sum_with_interest}</code>\n'
                                    f'üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: <code>{info_order[0]}</code>\n'
                                    f'üèõÔ∏è –ë–∞–Ω–∫: {info_order[1]}\n', parse_mode= 'HTML')
    except TelegramForbiddenError:
        pass

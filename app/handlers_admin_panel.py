import os
import sqlite3
from datetime import datetime as dt
import shutil

from aiogram import F,Bot, Router
from aiogram.types import CallbackQuery
from aiogram import types
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.types import FSInputFile
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext # –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
from app.general_def import  get_info_user, show_message_for_all_mailing, edit_or_answer_message

import app.keyboards as kb # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Å–æ–∫—Ä–∞—â–∞–µ–º –µ—ë –Ω–∞ 'kb'

from config import TOKEN, ADMIN_CHAT_ID

router = Router() # —ç—Ç–æ –ø–æ—á—Ç–∏ –∫–∞–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è handlers

bot = Bot(token = TOKEN)
class Form(StatesGroup): # —ç—Ç–æ—Ç –∫–ª–∞—Å—Å —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    id_for_create_order = State()
    sum_for_create_order = State()
    id_for_info = State()
    change_level = State()
    mailing_all_message = State()
    photo_for_mailing = State()
    add_admin = State()
    delete_admin = State()
    comment_on_refusal = State()

async def check_user_id(user_id: str)-> bool:
    """–í–µ—Ä–Ω—ë—Ç True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id –µ—Å—Ç—å"""
    # –ø—Ä–æ–≤–µ—Ä–∫–∞
    try:
        user_id = int(user_id)
    except ValueError:
        return False # –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ int

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT id FROM users WHERE id = ?", (user_id,))
    test = cursor.fetchall()  # –≤–æ–∑—å–º—ë—Ç –≤—Å–µ –∏–º–µ—é—â–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏
    connection.close()

    if test:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –µ—Å—Ç—å
        return True
    else:
        return False

@router.callback_query(F.data == 'admin_panel')
async def replenishment(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    message_id = await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                               text = f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',reply_markup= kb.admin_panel)

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"UPDATE message_for_change SET message_id = ? WHERE id = ?", (message_id,callback.from_user.id))
    cursor.execute(f"UPDATE message_for_delete SET message_id = ? WHERE id = ?", (message_id,callback.from_user.id))
    connection.commit()
    connection.close()

@router.callback_query(F.data == 'orders')
async def orders(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                 text=f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∑–∞—è–≤–∫–∞–º–∏ üëá',reply_markup=kb.orders)

@router.callback_query(F.data == 'add_orders')
async def add_orders(callback: CallbackQuery, state: FSMContext):
    message_id = await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                 text=f'–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞:',
                                 reply_markup=kb.back_in_orders)
    await state.update_data(bot_message_id = message_id) # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
    await state.set_state(Form.id_for_create_order)

@router.message(Form.id_for_create_order)
async def id_for_create_order(message: types.Message, state: FSMContext):
    data = await state.get_data()
    bot_message_id = data["bot_message_id"] # —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—ç—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–æ—Å–ª–∞–ª –±–æ—Ç)
    await state.clear()

    try:
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    except TelegramBadRequest:  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
        pass

    test = await check_user_id(message.text)

    if test:
        message_id = await edit_or_answer_message(chat_id=message.from_user.id, message_id=bot_message_id,
                                                  text=f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:',
                                                  reply_markup=kb.back_in_orders)
        await state.update_data(bot_message_id=message_id, user_id = message.text)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
        await state.set_state(Form.sum_for_create_order)
    else:
        message_id = await edit_or_answer_message(chat_id=message.from_user.id, message_id=bot_message_id,
                                                  text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑',
                                                  reply_markup=kb.back_in_orders)
        await state.update_data(bot_message_id=message_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
        await state.set_state(Form.id_for_create_order)

@router.message(Form.sum_for_create_order)
async def id_for_info(message: types.Message, state: FSMContext):
    data = await state.get_data()
    bot_message_id = data["bot_message_id"] # —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—ç—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–æ—Å–ª–∞–ª –±–æ—Ç)
    user_id = data["user_id"]
    await state.clear()

    try:
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    except TelegramBadRequest:  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
        pass

    try:
        sum_for_replenishment = int(message.text)
    except ValueError:
        message_id = await edit_or_answer_message(chat_id=message.from_user.id, message_id=bot_message_id,
                                                  text=f'–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑',
                                                  reply_markup=kb.back_in_orders)
        await state.update_data(bot_message_id=message_id, user_id=user_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
        await state.set_state(Form.sum_for_create_order)
        return

    current_datetime = dt.now()
    formatted_time = current_datetime.strftime("%H:%M:%S %d-%m-%Y")

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()

    cursor.execute(f"INSERT INTO replenishment_request "
                   f"(way,status,data_create,data_completion,sum,id_customer,id_admin) "
                   f"VALUES (?,?,?,?,?,?,?)", ('admin','completed',formatted_time, formatted_time,
                                               sum_for_replenishment, user_id, message.from_user.id)) # —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏

    cursor.execute(f"SELECT id FROM replenishment_request WHERE data_create = ? AND sum = ? AND id_customer = ?",
                   (formatted_time,sum_for_replenishment,user_id))
    id_order = cursor.fetchone() # —É–∑–Ω–∞—ë–º id –∑–∞—è–≤–∫–∏

    cursor.execute(f"SELECT balance, user_name FROM users WHERE id = ?",
                   (user_id,))
    info_user = cursor.fetchone()  # —É–∑–Ω–∞—ë–º –∫–∞–∫–æ–π –±–∞–ª–∞–Ω—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏–º –µ–≥–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å

    new_balance = info_user[0] + sum_for_replenishment

    cursor.execute(f"UPDATE users SET balance = ? WHERE id = ?", (new_balance, user_id))
    connection.commit() # –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å

    connection.close()

    message_in_admin_chat = (f'–ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {sum_for_replenishment} RUB\n'
                             f'ID –∞–¥–º–∏–Ω–∞: {message.from_user.id}\n'
                             f'user_name –∞–¥–º–∏–Ω–∞: @{message.from_user.username}\n\n'
                             f'–î–∞–Ω–Ω—ã–µ –æ –∑–∞—è–≤–∫–µ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:\n'
                             f'ID –∑–∞—è–≤–∫–∏: {id_order[0]}\n'
                             f'–°—É–º–º–∞: {sum_for_replenishment} RUB\n'
                             f'ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {user_id}\n'
                             f'user_name –ø–æ–ª—É—á–∞—Ç–µ–ª—è: @{info_user[1]}')

    try: # –≤—ã–≤–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç —Å –∞–¥–º–∏–Ω–∞–º–∏
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=message_in_admin_chat)
    except TelegramForbiddenError:
        pass

    try:
        await  bot.send_message(chat_id= user_id,
                                text= f'–ù–∞ –≤–∞—à —Å—á—ë—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ {sum_for_replenishment} RUB\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} RUB')
    except TelegramBadRequest:
        pass

    await edit_or_answer_message(chat_id=message.from_user.id, message_id=bot_message_id,
                                 text=f'‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∏ –¥–µ–Ω—å–≥–∏ –æ—Ç–æ—Å–ª–∞–Ω—ã\n\n'
                                        f'–î–∞–Ω–Ω—ã–µ –æ –∑–∞—è–≤–∫–µ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:\n'
                                        f'ID –∑–∞—è–≤–∫–∏: {id_order[0]}\n'
                                        f'–°—É–º–º–∞: {sum_for_replenishment} RUB\n'
                                        f'ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {user_id}\n'
                                        f'user_name –ø–æ–ª—É—á–∞—Ç–µ–ª—è: @{info_user[1]}',
                                 reply_markup=kb.back_in_orders)

@router.callback_query(F.data == 'show_data')
async def show_info_user(callback: CallbackQuery, state: FSMContext):
    message_id = await edit_or_answer_message(chat_id=callback.from_user.id, message_id= callback.message.message_id,
                                 text= f'–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω—ë–º',
                                    reply_markup= kb.back_in_admin_panel)

    await state.update_data(bot_message_id = message_id) # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
    await state.set_state(Form.id_for_info)

@router.message(Form.id_for_info)
async def id_for_info(message: types.Message, state: FSMContext):
    data = await state.get_data()
    bot_message_id = data["bot_message_id"] # —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—ç—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–æ—Å–ª–∞–ª –±–æ—Ç)
    await state.clear()

    try:
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    except TelegramBadRequest:  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
        pass

    test = await check_user_id(message.text)

    if test: # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –µ—Å—Ç—å
        message_id = await edit_or_answer_message(chat_id=message.chat.id,message_id=bot_message_id, text='–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...', )

        message_info = get_info_user(int(message.text))

        await edit_or_answer_message(chat_id=message.chat.id,message_id=message_id,text=message_info,
                                     reply_markup=kb.back_in_admin_panel)
    else:
        message_id = await edit_or_answer_message(chat_id=message.chat.id,message_id=bot_message_id,
                                    text="‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å —Ç–∞–∫–∏–º ID –Ω–µ—Ç ‚ö†Ô∏è\n–ø–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –µ—â—ë —Ä–∞–∑",
                                    reply_markup=kb.back_in_admin_panel)

        await state.update_data(bot_message_id= message_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
        await state.set_state(Form.id_for_info)


@router.callback_query(F.data == 'change_level')
async def change_level(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    message_id = await edit_or_answer_message(chat_id=callback.from_user.id, message_id= callback.message.message_id,
                                              text="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",reply_markup=kb.back_in_admin_panel)

    await state.update_data(bot_message_id=message_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
    await state.set_state(Form.change_level)

@router.message(Form.change_level)
async def change_level(message: types.Message, state: FSMContext):
    data = await state.get_data()
    bot_message_id = data["bot_message_id"]  # —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—ç—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–æ—Å–ª–∞–ª –±–æ—Ç)
    await state.clear()

    try:
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    except TelegramBadRequest:  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
        pass

    test = await check_user_id(message.text) # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–∞–∫–æ–≥–æ id

    if test: # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –µ—Å—Ç—å

        connection = sqlite3.connect('../working_file/data_base.sqlite3')
        cursor = connection.cursor()
        cursor.execute(f"SELECT user_name, level FROM users WHERE id = ?", (int(message.text),))
        info_user = cursor.fetchone()
        connection.close()

        message_result = ''
        if info_user[1] == 4:
            message_result = (f'–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{info_user[0]}\n'
            f'ID: {message.text}\n–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: –ü–∞—Ä—Ç–Ω—ë—Ä')
        else:
            message_result = (f'–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{info_user[0]}\n'
            f'ID: {message.text}\n–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {info_user[1]}')

        await edit_or_answer_message(chat_id=message.chat.id, message_id=bot_message_id, text=message_result,
                                    reply_markup= await kb.variants_levels(message.text))
    else:
        message_id = await edit_or_answer_message(chat_id=message.chat.id,message_id=bot_message_id,
                                    text="‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å —Ç–∞–∫–∏–º ID –Ω–µ—Ç ‚ö†Ô∏è\n–ø–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –µ—â—ë —Ä–∞–∑",
                                    reply_markup=kb.back_in_admin_panel)

        await state.update_data(bot_message_id= message_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
        await state.set_state(Form.change_level)

@router.callback_query(F.data.startswith('set_level_'))
async def set_level(callback: CallbackQuery):
    level = callback.data.split('_')[2]
    user_id = callback.data.split('_')[3]

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"UPDATE users SET level = ? WHERE id = ?", (int(level), int(user_id)))
    connection.commit()
    connection.close()

    if level == '4':
        level = '–ü–∞—Ä—Ç–Ω—ë—Ä'

    await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                 text=f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω lvl {level}\n–¥–ª—è {user_id}",
                                 reply_markup=kb.back_in_admin_panel)

@router.callback_query(F.data == 'mailing_all_info')
async def mailing_all(callback: CallbackQuery):
    message_for_user = show_message_for_all_mailing(callback.from_user.id)

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT message_id FROM message_for_delete WHERE id = ?", (callback.from_user.id,))
    message_id_for_change = cursor.fetchone()
    connection.close()
    try:
        await bot.delete_message(chat_id=callback.from_user.id, message_id=message_id_for_change[0])
    except TelegramBadRequest:
        pass

    # –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–æ—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ (–≤ –ø–µ—Ä–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ —Å–ø–∏—Å–∫–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –ø—É—Ç—å –∫ –Ω–µ–º—É)
    if message_for_user[1]:
        connection = sqlite3.connect('../working_file/data_base.sqlite3')
        cursor = connection.cursor()

        try:
            bot_message = await callback.message.answer_photo(photo=FSInputFile(message_for_user[1]),caption=message_for_user[0],
                                                reply_markup=kb.mailing_all_info,parse_mode= 'HTML')
        except TelegramBadRequest: # –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ HTML —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            bot_message = await callback.message.answer_photo(photo=FSInputFile(message_for_user[1]),
                                                     caption='‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! \n\n–ù–∞—Ä—É—à–µ–Ω <b>HTML</b> —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑',
                                                     reply_markup=kb.mailing_all_info, parse_mode='HTML')
            cursor.execute(f"UPDATE mailing SET message = ? WHERE id = ?", (' ', callback.from_user.id))

        cursor.execute(f"UPDATE message_for_delete SET message_id = ? WHERE id = ?",
                       (bot_message.message_id, callback.from_user.id))
        connection.commit()
        connection.close()
    else:
        await callback.message.answer(text= message_for_user[0],reply_markup=kb.mailing_all_info,parse_mode= 'HTML')

@router.callback_query(F.data == 'mailing_confirmation')
async def mailing_all(callback: CallbackQuery):
    try:
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    except TelegramBadRequest:
        pass
    bot_message = await callback.message.answer(f'–í—ã —É–≤–µ—Ä–µ–Ω–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å\n—Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞?',
                                  reply_markup= kb.choice_for_mailing)

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"UPDATE message_for_delete SET message_id = ? WHERE id = ?",
                   (bot_message.message_id, callback.from_user.id))
    connection.commit()
    connection.close()

@router.callback_query(F.data == 'mailing_all')
async def mailing_all(callback: CallbackQuery):
    await edit_or_answer_message(chat_id=callback.from_user.id, message_id= callback.message.message_id,
                                 text=f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ", reply_markup=kb.back_in_mailing_all)

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT id FROM users")
    all_users_id = cursor.fetchall()  # –≤–æ–∑—å–º—ë—Ç –≤—Å–µ –∏–º–µ—é—â–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏
    cursor.execute(f"SELECT message, use_file FROM mailing WHERE id = ?", (callback.from_user.id, ))
    mailing = cursor.fetchone()  # –≤–æ–∑—å–º—ë—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
    connection.close()

    if mailing[1] == 1:  # –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        path_directory = f'../working_file/file_for_mailing/{callback.from_user.id}'
        path_photo = ''
        for item in os.listdir(path_directory):
            path_photo = os.path.join(path_directory, item) # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ

        for user_id in all_users_id:
            try:
                await bot.send_photo(photo=FSInputFile(path_photo),chat_id=user_id[0],caption=mailing[0],parse_mode='HTML')
            except Exception:
                pass
    else:
        for user_id in all_users_id:
            try:
                await bot.send_message(chat_id=user_id[0], text=mailing[0],parse_mode= 'HTML',)
            except Exception:
                pass

@router.callback_query(F.data == 'change_message')
async def change_message(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        bot_message = await callback.message.edit_text(text=f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ\n—É–≤–∏–¥—è—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞",
                                         reply_markup=kb.back_in_admin_panel)
    except TelegramBadRequest:
        connection = sqlite3.connect('../working_file/data_base.sqlite3')
        cursor = connection.cursor()
        cursor.execute(f"SELECT message_id FROM message_for_delete WHERE id = ?", (callback.from_user.id,))
        message_id_delete = cursor.fetchone()
        connection.close()
        try:
            await bot.delete_message(chat_id=callback.from_user.id, message_id=message_id_delete[0])
        except TelegramBadRequest:  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
            pass
        bot_message = await callback.message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ\n—É–≤–∏–¥—è—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞',
                                      reply_markup=kb.back_in_mailing_all,parse_mode= 'HTML')

    await state.update_data(bot_message_id=bot_message.message_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
    await state.set_state(Form.mailing_all_message)


@router.message(Form.mailing_all_message)
async def mailing_all(message: types.Message, state: FSMContext):
    data = await state.get_data()
    bot_message_id = data["bot_message_id"]  # —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—ç—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–æ—Å–ª–∞–ª –±–æ—Ç)
    await state.clear()

    try:
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    except TelegramBadRequest:  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
        pass

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"UPDATE mailing SET message = ? WHERE id = ?", (message.text, message.from_user.id))
    connection.commit()
    connection.close()

    message_for_user = show_message_for_all_mailing(message.from_user.id)

    try:
        await bot.delete_message(chat_id=message.from_user.id, message_id=bot_message_id)
    except TelegramBadRequest:
        pass

    # –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–æ—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ (–≤ –ø–µ—Ä–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ —Å–ø–∏—Å–∫–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –ø—É—Ç—å –∫ –Ω–µ–º—É)
    if message_for_user[1]:
        connection = sqlite3.connect('../working_file/data_base.sqlite3')
        cursor = connection.cursor()

        try:
            bot_message = await message.answer_photo(photo=FSInputFile(message_for_user[1]),caption=message_for_user[0],
                                                      reply_markup=kb.mailing_all_info, parse_mode='HTML')
        except TelegramBadRequest: # –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ HTML —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            bot_message = await message.answer_photo(photo=FSInputFile(message_for_user[1]),
                                                     caption='‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! \n\n–ù–∞—Ä—É—à–µ–Ω <b>HTML</b> —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑',
                                                     reply_markup=kb.mailing_all_info, parse_mode='HTML')
            cursor.execute(f"UPDATE mailing SET message = ? WHERE id = ?", (' ', message.from_user.id))

        cursor.execute(f"UPDATE message_for_delete SET message_id = ? WHERE id = ?",
                       (bot_message.message_id, message.from_user.id))
        connection.commit()
        connection.close()
    else:
        await message.answer(text=message_for_user[0], reply_markup=kb.mailing_all_info, parse_mode='HTML')


@router.callback_query(F.data == 'attach_file')
async def attach_file(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        bot_message = await callback.message.edit_text(text=f"–û—Ç–æ—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è\n\n–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:"
                                                            f"\n–í–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ\n–§–æ—Ç–æ –Ω–µ –±–æ–ª–µ–µ 50–º–±",
                                                       reply_markup=kb.back_in_mailing_all)
    except TelegramBadRequest:
        connection = sqlite3.connect('../working_file/data_base.sqlite3')
        cursor = connection.cursor()
        cursor.execute(f"SELECT message_id FROM message_for_delete WHERE id = ?", (callback.from_user.id,))
        message_id_delete = cursor.fetchone()
        connection.close()
        try:
            await bot.delete_message(chat_id=callback.from_user.id, message_id=message_id_delete[0])
        except TelegramBadRequest:  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
            pass
        bot_message = await callback.message.answer(f'–û—Ç–æ—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è\n\n–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:'
                                                    f'\n–í–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ\n–§–æ—Ç–æ –Ω–µ –±–æ–ª–µ–µ 50–º–±',
                                                    reply_markup=kb.back_in_mailing_all,parse_mode= 'HTML')

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"UPDATE message_for_delete SET message_id = ? WHERE id = ?",
                   (bot_message.message_id, callback.from_user.id))
    connection.commit()
    connection.close()

    await state.update_data(bot_message_id=bot_message.message_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
    await state.set_state(Form.photo_for_mailing)

@router.message(Form.photo_for_mailing)
async def photo_for_mailing(message: types.Message, state: FSMContext):
    message_for_user = ''
    this_photo = True

    data = await state.get_data()
    bot_message_id = data["bot_message_id"]  # —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—ç—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–æ—Å–ª–∞–ª –±–æ—Ç)
    await state.clear()

    try:
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    except TelegramBadRequest:  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
        pass

    if message.photo:
        file_info = message.photo[-1]
        file_type = "photo"
    elif message.document and message.document.mime_type.startswith('image/'):
        file_info = message.document
        file_type = "document"
    else:
        message_for_user += 'Ô∏è‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ!\n'
        file_info = message.text
        this_photo = False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    max_size_bytes = 50 * 1024 * 1024 # –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ 50–º–± (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –±–∞–π—Ç–∞—Ö)
    if this_photo and file_info.file_size > max_size_bytes:
        message_for_user += 'Ô∏è‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë'
    elif this_photo: # –µ—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ –∏ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–æ—Ç–æ
        # —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–º –≤ –ø–∞–ø–∫–µ –∞–¥–º–∏–Ω–∞
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
            for item in os.listdir(f'../working_file/file_for_mailing/{message.from_user.id}'):
                item_path = os.path.join(f'../working_file/file_for_mailing/{message.from_user.id}', item)
                try:
                    if os.path.isfile(item_path):
                        os.remove(item_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
                    elif os.path.isdir(item_path):
                        os.rmdir(item_path)  # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                except Exception:
                    pass

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file = await bot.get_file(file_info.file_id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            file_ext = file.file_path.split('.')[-1] if '.' in file.file_path else 'jpg' # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ jpeg
            filename = f"{message.from_user.id}_{message.message_id}.{file_ext}"
            save_path = os.path.join(f'../working_file/file_for_mailing/{message.from_user.id}', filename) # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await bot.download_file(file.file_path, save_path)
            message_for_user += 'Ô∏è‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω'
            connection = sqlite3.connect('../working_file/data_base.sqlite3')
            cursor = connection.cursor()
            cursor.execute(f"UPDATE mailing SET use_file = ? WHERE id = ?", (1, message.from_user.id))
            connection.commit()
            connection.close()
        except Exception:
            message_for_user += 'Ô∏è‚ö†Ô∏è –û—à–∏–±–∫–∞!!!\n\n–§–æ—Ç–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!'

    message_id = await edit_or_answer_message(chat_id = message.from_user.id, message_id = bot_message_id,
                                          text=message_for_user,reply_markup=kb.back_in_mailing_all)

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"UPDATE message_for_delete SET message_id = ? WHERE id = ?",
                   (message_id, message.from_user.id))
    connection.commit()
    connection.close()


@router.callback_query(F.data == 'unpin_file')
async def unpin_file(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
    for item in os.listdir(f'../working_file/file_for_mailing/{callback.from_user.id}'):
        item_path = os.path.join(f'../working_file/file_for_mailing/{callback.from_user.id}', item)
        try:
            if os.path.isfile(item_path):
                os.remove(item_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
            elif os.path.isdir(item_path):
                os.rmdir(item_path)  # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        except Exception:
            pass

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"UPDATE mailing SET use_file = ? WHERE id = ?",(0, callback.from_user.id))
    connection.commit()
    connection.close()

    await callback.answer('–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —É–±—Ä–∞–Ω–æ!')

    message_for_user = show_message_for_all_mailing(callback.from_user.id)

    try:
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    except TelegramBadRequest:
        pass

    # –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–æ—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ (–≤ –ø–µ—Ä–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ —Å–ø–∏—Å–∫–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –ø—É—Ç—å –∫ –Ω–µ–º—É)
    if message_for_user[1]:
        connection = sqlite3.connect('../working_file/data_base.sqlite3')
        cursor = connection.cursor()
        try:
            bot_message = await callback.message.answer_photo(photo=FSInputFile(message_for_user[1]),caption=message_for_user[0],
                                                      reply_markup=kb.mailing_all_info, parse_mode='HTML')
        except TelegramBadRequest: # –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ HTML —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            bot_message = await callback.message.answer_photo(photo=FSInputFile(message_for_user[1]),
                                                     caption='‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! \n\n–ù–∞—Ä—É—à–µ–Ω <b>HTML</b> —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑',
                                                     reply_markup=kb.mailing_all_info, parse_mode='HTML')
            cursor.execute(f"UPDATE mailing SET message = ? WHERE id = ?", (' ', callback.from_user.id))

        cursor.execute(f"UPDATE message_for_delete SET message_id = ? WHERE id = ?",
                       (bot_message.message_id, callback.from_user.id))
        connection.commit()
        connection.close()
    else:
        await callback.message.answer(text=message_for_user[0], reply_markup=kb.mailing_all_info, parse_mode='HTML')



@router.callback_query(F.data == 'add_admin')
async def add_admin(callback: CallbackQuery, state: FSMContext):

    message_id = await edit_or_answer_message(chat_id=callback.from_user.id, message_id= callback.message.message_id,
                                              text=f"–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º\n\n"
                                              f"–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ",
                                              reply_markup=kb.back_in_admin_panel)

    await state.update_data(bot_message_id= message_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
    await state.set_state(Form.add_admin)

@router.message(Form.add_admin)
async def add_admin(message: types.Message, state: FSMContext):
    data = await state.get_data()
    bot_message_id = data["bot_message_id"]  # —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—ç—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–æ—Å–ª–∞–ª –±–æ—Ç)
    await state.clear()

    message_result = ''

    try:
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    except TelegramBadRequest:  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
        pass

    try:
        user_id = int(message.text)
    except ValueError:
        message_result = '‚ö†Ô∏è –í–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID ‚ö†Ô∏è\n–ø–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –µ—â—ë —Ä–∞–∑\n'
        user_id = 0

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT id FROM users WHERE id = ?", (user_id,))
    info_user = cursor.fetchone()
    cursor.execute(f"SELECT admin_id FROM admins WHERE admin_id = ?", (user_id,))
    user_is_admin = cursor.fetchone()
    connection.close()
    if info_user: # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –µ—Å—Ç—å

        if user_is_admin:
            message_result += '‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º'
        else:
            new_directory_admin = os.path.join('../working_file/file_for_mailing', str(user_id))
            os.makedirs(new_directory_admin, exist_ok=True) # —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞

            connection = sqlite3.connect('../working_file/data_base.sqlite3')
            cursor = connection.cursor()
            cursor.execute(f"INSERT INTO mailing (id) VALUES (?)",(user_id,))
            cursor.execute(f"INSERT INTO admins (admin_id) VALUES (?)",(user_id,))
            connection.commit()  # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            connection.close()

            await edit_or_answer_message(chat_id=message.chat.id, message_id=bot_message_id,
                                        text='‚úÖ –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞',reply_markup= kb.back_in_admin_panel)

            return
    else:
        message_result += '‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å —Ç–∞–∫–∏–º ID –Ω–µ—Ç ‚ö†Ô∏è\n–ø–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –µ—â—ë —Ä–∞–∑'

    message_id = await edit_or_answer_message(chat_id=message.chat.id,message_id=bot_message_id,text=message_result,
                                reply_markup=kb.back_in_admin_panel)

    await state.update_data(bot_message_id= message_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
    await state.set_state(Form.add_admin)

@router.callback_query(F.data == 'delete_admin')
async def delete_admin(callback: CallbackQuery, state: FSMContext):
    message_id = await edit_or_answer_message(chat_id=callback.from_user.id, message_id= callback.message.message_id,
                                              text=f"–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω",
                                             reply_markup=kb.back_in_admin_panel)

    await state.update_data(bot_message_id=message_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
    await state.set_state(Form.delete_admin)

@router.message(Form.delete_admin)
async def delete_admin(message: types.Message, state: FSMContext):
    data = await state.get_data()
    bot_message_id = data["bot_message_id"]  # —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—ç—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–æ—Å–ª–∞–ª –±–æ—Ç)
    await state.clear()

    message_result = ''

    try:
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    except TelegramBadRequest:  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
        pass

    try:
        user_id = int(message.text)
    except ValueError:
        message_result = '‚ö†Ô∏è –í–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID ‚ö†Ô∏è\n–ø–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –µ—â—ë —Ä–∞–∑\n'
        user_id = 0

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT id FROM users WHERE id = ?", (user_id,))
    info_user = cursor.fetchone()
    cursor.execute(f"SELECT admin_id FROM admins WHERE admin_id = ?", (user_id,))
    user_is_admin = cursor.fetchone()
    connection.close()
    if info_user: # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –µ—Å—Ç—å

        if user_is_admin:

            directory_admin = os.path.join('../working_file/file_for_mailing', str(user_id))
            shutil.rmtree(directory_admin)

            connection = sqlite3.connect('../working_file/data_base.sqlite3')
            cursor = connection.cursor()
            cursor.execute(f'DELETE FROM mailing WHERE id = ?', (user_id,))
            cursor.execute(f'DELETE FROM admins WHERE admin_id = ?', (user_id,))
            connection.commit()  # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            connection.close()

            await edit_or_answer_message(chat_id=message.chat.id, message_id=bot_message_id,
                                        text='‚úÖ –£—Å–ø–µ—à–Ω–æ —É–±—Ä–∞–Ω —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞',
                                        reply_markup=kb.back_in_admin_panel)
            return
        else:
            message_result += '‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º'
    else:
        message_result += '‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å —Ç–∞–∫–∏–º ID –Ω–µ—Ç ‚ö†Ô∏è\n–ø–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –µ—â—ë —Ä–∞–∑'

    message_id = await edit_or_answer_message(chat_id=message.chat.id,message_id=bot_message_id,text=message_result,
                                reply_markup=kb.back_in_admin_panel)

    await state.update_data(bot_message_id=message_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
    await state.set_state(Form.delete_admin)

@router.callback_query(F.data == 'my_orders_withdrawal')
async def my_orders_withdrawal(callback: CallbackQuery, state: FSMContext):
    await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                 text=f'–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –≤—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø—Ä–∏–Ω—è–ª–∏ üëá\n'
                                      f'–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞—è–≤–∫—É —á—Ç–æ –±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π',
                                 reply_markup= await kb.all_orders())

@router.callback_query(F.data.startswith('show_order|'))
async def select_currency(callback: CallbackQuery):
    id_order = callback.data.split('|')[1]

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT sum, data_create, bank, phone_or_number_card, id_customer, status FROM withdrawal_requests WHERE id = ?",
                   (id_order,))
    order = cursor.fetchone()  # –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    connection.close()

    if order[5] != 'not_completed':
        await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                     text=f'‚úÖ –î–∞–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!',reply_markup=kb.back_in_orders)
        return 

    await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                 text=f'–î–∞–Ω–Ω—ã–µ:\n'
                                      f'ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è: /user_id_{order[4]}\n'
                                      f'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order[1]}\n'
                                      f'–°—Ç–∞—Ç—É—Å: –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n\n'
                                      f'üí∏ –°—É–º–º–∞: <code>{order[0]}</code>\n'
                                      f'üèõÔ∏è –ë–∞–Ω–∫: {order[2]}\n'
                                      f'üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: <code>{order[3]}</code>\n'
                                      f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ –∑–∞—è–≤–∫–æ–π üëá',
                                 reply_markup=await kb.info_order(id_order))

@router.callback_query(F.data.startswith('confirm_output|'))
async def select_currency(callback: CallbackQuery):
    id_order = callback.data.split('|')[1]

    current_datetime = dt.now()
    formatted_time = current_datetime.strftime("%H:%M:%S %d-%m-%Y")

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()

    cursor.execute(f"SELECT sum,id_customer FROM withdrawal_requests WHERE id = ?", (id_order,))
    info_order = cursor.fetchone()  # –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É

    cursor.execute(f"SELECT balance,withdrawal_balance FROM users WHERE id = ?", (info_order[1],))
    info_user = cursor.fetchone()  # –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É

    sum_with_interest = (info_order[0] * 3) / 100  # —Å—É–º–º–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã—á–µ—Å—Ç—å –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    sum_with_interest = info_order[0] - sum_with_interest  # —Å—É–º–º–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏

    new_balance = info_user[0] - info_order[0]
    new_withdrawal_balance = info_user[1] - info_order[0]

    cursor.execute(f"UPDATE users SET  balance = ?, withdrawal_balance = ? WHERE id = ?",
                   (new_balance, new_withdrawal_balance, info_order[1]))
    cursor.execute(f"UPDATE withdrawal_requests SET status = ?, data_completion = ? WHERE id = ?",
                   ('completed', formatted_time, id_order))
    connection.commit()

    connection.close()

    try:
        await bot.send_message(chat_id=info_order[1], text=f'üí∏ –î–µ–Ω—å–≥–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω—ã: {sum_with_interest}RUB',)
    except TelegramBadRequest:
        pass

    await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                     text=f'‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n'
                                          f'–ó–∞—è–≤–∫–∞ –Ω–∞ {sum_with_interest}RUB –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
                                     reply_markup= await kb.all_orders())

@router.callback_query(F.data.startswith('reject_output|'))
async def select_currency(callback: CallbackQuery, state: FSMContext):
    id_order = callback.data.split('|')[1]

    message_id = await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                              text='–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ (–≠—Ç–æ –≤ –±—É–¥–µ—Ç –æ—Ç–æ—Å–ª–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)',
                                              reply_markup=kb.back_in_orders)

    await state.update_data(bot_message_id=message_id, id_order = id_order)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º message_id –±–æ—Ç–∞
    await state.set_state(Form.comment_on_refusal)

@router.message(Form.comment_on_refusal)
async def comment_on_refusal(message: types.Message, state: FSMContext):
    data = await state.get_data()
    bot_message_id = data["bot_message_id"]
    id_order = data["id_order"]
    await state.clear()

    try:
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    except TelegramBadRequest:  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
        pass

    current_datetime = dt.now()
    formatted_time = current_datetime.strftime("%H:%M:%S %d-%m-%Y")

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()

    cursor.execute(f"SELECT id_customer, sum FROM withdrawal_requests WHERE id = ?", (id_order,))
    info_order = cursor.fetchone()

    cursor.execute(f"SELECT withdrawal_balance FROM users WHERE id = ?", (info_order[0],))
    withdrawal_balance = cursor.fetchone()  # –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É

    new_withdrawal_balance = withdrawal_balance[0] - info_order[1]

    cursor.execute(f"UPDATE users SET withdrawal_balance = ? WHERE id = ?",
                   (new_withdrawal_balance, info_order[0]))

    cursor.execute(f"UPDATE withdrawal_requests SET status = ?, data_completion = ?, comment_on_refusal = ?  WHERE id = ?",
                   ('rejected',formatted_time,message.text, id_order))
    connection.commit()
    connection.close()

    try:
        await bot.send_message(chat_id=info_order[0],
                               text=f'–ó–∞—è–≤–∫–∞ ‚Ññ{id_order} –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\n'
                                    f'–ü—Ä–∏—á–∏–Ω–∞: {message.text}\n\n'
                                    f'–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É',
                               reply_markup= kb.manager_url)
    except TelegramBadRequest:
        pass

    await state.clear()
    await edit_or_answer_message(chat_id=message.from_user.id, message_id=bot_message_id,
                                  text=f'‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n{message.text}',
                                  reply_markup=await kb.all_orders())


@router.message(F.text.startswith("/order_id_"))
async def order_id(message: types.Message):
    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT admin_id FROM admins WHERE admin_id = ?", (message.from_user.id,))
    check_admin = cursor.fetchone()
    connection.commit()

    if check_admin: # –µ—Å–ª–∏ –µ—Å—Ç—å –∞–¥–º–∏–Ω —Å —Ç–∞–∫–∏–º id
        order_id = message.text.split("_")[2].strip()

        if not order_id.isdigit(): # –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞
            return

        connection = sqlite3.connect('../working_file/data_base.sqlite3')
        cursor = connection.cursor()
        cursor.execute(f"SELECT id_customer,data_create, data_completion, sum, phone_or_number_card, bank, status, comment_on_refusal"
                       f" FROM withdrawal_requests WHERE id = ?",(order_id,))
        order = cursor.fetchone()
        connection.close()

        if order:
            connection = sqlite3.connect('../working_file/data_base.sqlite3')
            cursor = connection.cursor()
            cursor.execute(f"SELECT user_name FROM users WHERE id = ?",(order[0],))
            user_name = cursor.fetchone()
            connection.close()

            if not order[2]: # –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                order[2] = '–Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω'

            status = '–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω'
            if order[6] == 'completed':
                status = '–≤—ã–ø–æ–ª–Ω–µ–Ω'
            elif order[6] == 'rejected':
                status = f'–æ—Ç–∫–ª–æ–Ω—ë–Ω \n–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {order[7]}'


            await message.answer(text=f'ID –∑–∞—è–≤–∫–∏:  /order_id_{order_id}_\n\n'
                                        f'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:  /user_id_{order[0]}_\n'
                                        f'user_name –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user_name[0]}\n\n'
                                        f'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order[1]}\n'
                                        f'–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {order[2]}\n'
                                        f'–°—Ç–∞—Ç—É—Å: <b>{status}</b>\n'
                                        f'üí∏ –°—É–º–º–∞: <code>{order[3]}</code>\n'
                                        f'üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: <code>{order[4]}</code>\n'
                                        f'üèõÔ∏è –ë–∞–Ω–∫: {order[5]}\n', parse_mode= 'HTML')
        else:
            await message.answer(f'‚ùå –ó–∞—è–≤–∫–∏ —Å ID = {order_id} –Ω–µ—Ç!')


@router.message(F.text.startswith("/user_id_"))
async def order_id(message: types.Message):
    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT admin_id FROM admins WHERE admin_id = ?", (message.from_user.id,))
    check_admin = cursor.fetchone()
    connection.commit()

    if check_admin: # –µ—Å–ª–∏ –µ—Å—Ç—å –∞–¥–º–∏–Ω —Å —Ç–∞–∫–∏–º id
        user_id = message.text.split("_")[2].strip()

        if not user_id.isdigit(): # –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞
            return

        connection = sqlite3.connect('../working_file/data_base.sqlite3')
        cursor = connection.cursor()
        cursor.execute(f"SELECT id FROM users WHERE id = ?", (user_id,))
        check_user = cursor.fetchone()
        connection.close()

        if check_user: # –µ—Å–ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å
            text = get_info_user(int(user_id))
            await message.answer(text)
        else:
            await message.answer(f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID = {user_id} –Ω–µ—Ç')



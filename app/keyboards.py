from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.config import CHANNEL_URL, MANAGER_URL
from aiogram.utils.keyboard import InlineKeyboardBuilder
import sqlite3
# —ç—Ç–æ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞

async def main_menu(user_id: int):
    keyboard = InlineKeyboardBuilder()

    keyboard.add(InlineKeyboardButton(text='–ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile'))

    keyboard.row(
        InlineKeyboardButton(text='–ú–∞–≥–∞–∑–∏–Ω', callback_data='shop'),
        InlineKeyboardButton(text='–ë–æ–Ω—É—Å—ã', callback_data='bonus')
    )

    keyboard.row(
    InlineKeyboardButton(text='–ò–Ω—Ñ–æ', callback_data='info'),
        InlineKeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings')
    )
    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT admin_id FROM admins WHERE admin_id = ?", (user_id,))
    check_for_admin = cursor.fetchone()  # –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    connection.close()

    keyboard.adjust(1, 2, 2) # –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ —Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

    if check_for_admin:
        keyboard.add(InlineKeyboardButton(text='–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞', callback_data='admin_panel'))
        keyboard.adjust(1, 2, 2, 1)

    return keyboard.as_markup()

shop = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏', callback_data='show_all_levels')],
    [InlineKeyboardButton(text='–£–ª—É—á—à–∏—Ç—å', callback_data='improve')],
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='main_menu')],
])

replenishment_or_back_main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='money_replenishment')],
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='main_menu')],
])

async def show_all_levels():
    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT level, prise, emoji_level FROM levels WHERE level != ? AND level != ?", (0,9))
    all_level = cursor.fetchall()  # –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    connection.close()

    sorted_level = sorted(all_level, key=lambda x: x[0], reverse = True)  # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ø–æ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞

    keyboard = InlineKeyboardBuilder()
    for level in sorted_level:
        keyboard.add(InlineKeyboardButton(text=f'{level[2]} {level[0]}   {level[1]} ‚ÇΩ', callback_data=f'show_buy_level_{level[0]}'))

    keyboard.add(InlineKeyboardButton(text=f'–ù–∞–∑–∞–¥', callback_data=f'shop'))

    keyboard.adjust(1)
    return keyboard.as_markup()

async def buy_level(level: int, prise: int):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text=f'–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏', callback_data=f'buy_level_{level}_{prise}'))
    keyboard.add(InlineKeyboardButton(text=f'–ù–∞–∑–∞–¥', callback_data=f'show_all_levels'))
    keyboard.adjust(1)
    return keyboard.as_markup()

async def show_level_for_improve(current_level: int):
    """–§–æ—Ä–º—É–ª–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è\n
     —Å—Ç–æ–∏–º–æ—Å—Ç—å_–∂–µ–ª–∞–µ–º–æ–≥–æ_—É—Ä–æ–≤–Ω—è - —Å—Ç–æ–∏–º–æ—Å—Ç—å_—Ç–µ–∫—É—â–µ–≥–æ_—É—Ä–æ–≤–Ω—è + 50 ‚ÇΩ —à—Ç—Ä–∞—Ñ\n
     –ø—Ä–∏–º–µ—Ä 500 - 250 + 50 = 300 —ç—Ç–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å 1 —É—Ä–æ–≤–Ω—è –Ω–∞ 2"""
    keyboard = InlineKeyboardBuilder()

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()

    cursor.execute(f"SELECT level, prise, emoji_level FROM levels WHERE level != ?", (0,))
    all_levels = cursor.fetchall()  # –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    cursor.execute(f"SELECT prise FROM levels WHERE level = ?", (current_level,))
    prise_current_level = cursor.fetchone()  # –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É

    connection.close()

    sorted_levels = sorted(all_levels, key=lambda x: x[0])  # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ø–æ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞

    for level in sorted_levels:
        if level[0] == 9: # —ç—Ç–æ —É—Ä–æ–≤–µ–Ω—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –µ–≥–æ –Ω–µ –Ω–∞–¥–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
            continue

        if level[0] > current_level: # –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            prise_level = level[1] - prise_current_level[0] + 50 # —ç—Ç–æ —Ñ–æ—Ä–º—É–ª–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
            keyboard.add(InlineKeyboardButton(text=f'–£—Ä–æ–≤–µ–Ω—å {level[2]} {level[0]} –∑–∞ {prise_level} ‚ÇΩ',
                                              callback_data=f'show_level_for_improve|{level[0]}|{prise_level}'))

    keyboard.add(InlineKeyboardButton(text=f'–ù–∞–∑–∞–¥', callback_data=f'shop'))

    keyboard.adjust(1)
    return keyboard.as_markup()

async def buy_improve(selected_level: int, prise: int):
    keyboard = InlineKeyboardBuilder()

    keyboard.add(InlineKeyboardButton(text=f'–£–ª—É—á—à–∏—Ç—å', callback_data=f'buy_improve_{selected_level}_{prise}'))
    keyboard.add(InlineKeyboardButton(text=f'–ù–∞–∑–∞–¥', callback_data=f'improve'))

    keyboard.adjust(1)
    return keyboard.as_markup()

async def settings(user_id: int):
    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT selected_currency FROM users WHERE id = ?", (user_id,))
    selected_currency = cursor.fetchone()  # –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    connection.close()

    if selected_currency[0] == 'RUB':
        flag = 'üá∑üá∫'
        opposite_flag = 'USD' #  —ç—Ç–æ —Ç–∞ –≤–∞–ª—é—Ç–∞ –∫–æ—Ç–æ—Ä—É—é –º—ã —É—Å—Ç–∞–Ω–æ–≤–∏–º, –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é)
    else:
        flag = 'üá¨üáß'
        opposite_flag = 'RUB'

    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text=f'{flag} –û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞', callback_data= f'change_currency_{opposite_flag}'))
    keyboard.add(InlineKeyboardButton(text=f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ', callback_data= f'notification_replenishment'))
    keyboard.add(InlineKeyboardButton(text=f'–ù–∞–∑–∞–¥', callback_data= f'main_menu'))
    keyboard.adjust(1)

    return keyboard.as_markup()

async def notification_replenishment(user_id: int):
    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT notifications_from_one_stage_referral, notifications_from_two_stage_referral,"
                   f"notifications_from_three_stage_referral  FROM users WHERE id = ?", (user_id,))
    notification = cursor.fetchone()  # –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    connection.close()

    opposite_one_stage = 1
    opposite_two_stage = 1
    opposite_three_stage = 1

    info_about_the_one_stage = '–≤—ã–∫–ª.'
    info_about_the_two_stage = '–≤—ã–∫–ª.'
    info_about_the_three_stage = '–≤—ã–∫–ª.'

    if notification[0] == 1:
        opposite_one_stage = 0
        info_about_the_one_stage = '–≤–∫–ª.'

    if notification[1] == 1:
        opposite_two_stage = 0
        info_about_the_two_stage = '–≤–∫–ª.'

    if notification[2] == 1:
        opposite_three_stage = 0
        info_about_the_three_stage = '–≤–∫–ª.'

    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text=f'1 —Å—Ç—É–ø–µ–Ω—å {info_about_the_one_stage}',
                                      callback_data=f'change_notification_stage|1|{opposite_one_stage}'))
    keyboard.add(InlineKeyboardButton(text=f'2 —Å—Ç—É–ø–µ–Ω—å {info_about_the_two_stage}',
                                      callback_data=f'change_notification_stage|2|{opposite_two_stage}'))
    keyboard.add(InlineKeyboardButton(text=f'3 —Å—Ç—É–ø–µ–Ω—å {info_about_the_three_stage}',
                                      callback_data=f'change_notification_stage|3|{opposite_three_stage}'))
    keyboard.add(InlineKeyboardButton(text=f'–ù–∞–∑–∞–¥', callback_data=f'settings'))
    keyboard.adjust(1)

    return keyboard.as_markup()


profile_keb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='money_replenishment')],
    [InlineKeyboardButton(text='üí∞ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤', callback_data='money_withdrawal')],
    [InlineKeyboardButton(text='üìÇ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', callback_data='history_transactions')],
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='main_menu')],
])

async def replenishment():
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text='–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', callback_data=f'replenishment_bankMap'))
    keyboard.add(InlineKeyboardButton(text='–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', callback_data=f'replenishment_crystalPAY'))
    keyboard.add(InlineKeyboardButton(text='CryptoBot', callback_data=f'replenishment_cryptoBot'))
    keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'profile'))

    keyboard.adjust(1, 1, 1, 1)

    return keyboard.as_markup()

async def withdrawal():
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text='–°–ë–ü', callback_data=f'withdrawal_SBP'))
    keyboard.add(InlineKeyboardButton(text='–ö–∞—Ä—Ç–∞ –±–∞–Ω–∫–∞', callback_data=f'withdrawal_bankMap'))
    keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'profile'))

    keyboard.adjust(1, 1, 1)

    return keyboard.as_markup()

transaction_history = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–±—ã–ª–∏', callback_data='history_profit')],
    [InlineKeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π', callback_data='history_replenishment')],
    [InlineKeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤', callback_data='history_withdrawal')],
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='profile')],
])

async def history_replenishment(user_id: int, selected_history: str):
    '''selected_history == replenishment_request or withdrawal_requests or profit_from_referrals\n
       selected_history —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î –ø–æ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π'''
    keyboard = InlineKeyboardBuilder()
    counter = 0

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()

    orders = []
    if selected_history == 'replenishment_request' or selected_history == 'withdrawal_requests':
        cursor.execute(f"SELECT id, status, sum FROM {selected_history} WHERE id_customer = ?", (user_id,))
        all_orders = cursor.fetchall()  # –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É

        if all_orders:
            for order in all_orders:
                status = ''
                if order[1] == 'not_completed':
                    status = '–Ω–µ –æ–ø–ª–∞—á–µ–Ω'
                    if selected_history == 'withdrawal_requests': # —ç—Ç–æ –¥–ª—è –≤—ã–≤–æ–¥–∞
                        status = '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ'
                elif order[1] == 'completed':
                    status = '–≤—ã–ø–æ–ª–Ω–µ–Ω'
                elif order[1] == 'rejected':
                    status = '–æ—Ç–∫–ª–æ–Ω—ë–Ω'

                orders.append([order[0],order[2], status])

    elif selected_history == 'profit_from_referrals':
        cursor.execute(f"SELECT id, sum FROM {selected_history} WHERE id_recipient = ?", (user_id,))
        all_orders = cursor.fetchall()  # –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É

        if all_orders:
            for order in all_orders:
                orders.append([order[0], str(order[1]), ' '])

    connection.close()
    sorted_orders = sorted(orders, key=lambda x: x[0]) # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ø–æ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞

    for order in sorted_orders:
        keyboard.add(InlineKeyboardButton(text=f'‚Ññ{order[0]}   –Ω–∞ {order[1]} RUB   {order[2]}',
                                          callback_data=f'show_order_for_user|{selected_history}|{order[0]}'))
        counter += 1
        if counter == 100:
            break


    keyboard.add(InlineKeyboardButton(text=f'–ù–∞–∑–∞–¥', callback_data=f'history_transactions'))
    keyboard.adjust(1)
    return keyboard.as_markup()


bank = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–°–±–µ—Ä–±–∞–Ω–∫',  callback_data='bank_sber')],
    [InlineKeyboardButton(text='–ê–ª—å—Ñ–∞ –±–∞–Ω–∫',  callback_data='bank_alpha')],
    [InlineKeyboardButton(text='–¢ –±–∞–Ω–∫',  callback_data='bank_Tbank')],
    [InlineKeyboardButton(text='–í–¢–ë',  callback_data='bank_vtb')],
    [InlineKeyboardButton(text='–û–∑–æ–Ω',  callback_data='bank_ozon')],
    [InlineKeyboardButton(text='–î—Ä—É–≥–æ–π –±–∞–Ω–∫',  callback_data='bank_another')],
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='withdrawal_SBP')],
])

create_order_on_withdrawal = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É',  callback_data='confirm_order')],
    [InlineKeyboardButton(text='–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ',  callback_data='money_withdrawal')],
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='profile')],
])
async def payment_manager(back_button: str = 'profile'):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text='–°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞', url=MANAGER_URL))
    keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data= back_button))
    keyboard.adjust(1, 1, 1)
    return keyboard.as_markup()

async def payment_verification(method: str, order_id: int, id_check: str, url_payment: str = None, where_back: str = 'profile'):
    '''where_back —ç—Ç–æ –∫—É–¥–∞ –æ—Ç—Å—ã–ª–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª—å, –Ω–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å  history_replenishment'''
    keyboard = InlineKeyboardBuilder()

    keyboard.add(InlineKeyboardButton(text='–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É', url=url_payment))
    if method == 'crystalPAY':
        keyboard.add(InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=f'check_payment|{order_id}|{id_check}|{method}'))
    elif method == 'cryptoBot':
        keyboard.add(InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É',callback_data=f'check_payment|{order_id}|{id_check}|{method}'))
    keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data= where_back))

    keyboard.adjust(1, 1, 1)

    return keyboard.as_markup()


admin_panel = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ó–∞—è–≤–∫–∏', callback_data='orders')],
    [InlineKeyboardButton(text='–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö', callback_data='show_data')],
    [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–µ–Ω–∏–µ lvl', callback_data='change_level')],
    [InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º', callback_data='mailing_all_info')],
    [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data='add_admin')],
    [InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data='delete_admin')],
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='main_menu')],
])

orders = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data='add_orders')],
    [InlineKeyboardButton(text='–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥', callback_data='my_orders_withdrawal')],
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='admin_panel')],
])

async def all_orders():
    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT id FROM withdrawal_requests WHERE status = ?",('not_completed',))
    all_orders = cursor.fetchall()  # –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    connection.close()

    keyboard = InlineKeyboardBuilder()
    counter = 0
    for id_order in all_orders:
        keyboard.add(InlineKeyboardButton(text=f'{id_order[0]}', callback_data=f'show_order|{id_order[0]}')) # –≤ –∫–æ–Ω–µ—Ü –¥–æ–±–∞–≤–ª—è–µ–º id –∑–∞—è–≤–∫–∏

        counter += 1
        if counter == 100:
            break

    keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='orders'))

    keyboard.adjust(1)  # 1 –∫–Ω–æ–ø–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ
    return keyboard.as_markup()

async def info_order(id_order: str):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text='–í—ã–ø–æ–ª–Ω–∏—Ç—å', callback_data=f'confirm_output|{id_order}'))
    keyboard.add(InlineKeyboardButton(text='–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'reject_output|{id_order}'))
    keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='orders'))
    keyboard.adjust(1, 1, 1)
    return keyboard.as_markup()

async def variants_levels(user_id: str):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text='0', callback_data=f'set_level_0_{user_id}'))
    keyboard.add(InlineKeyboardButton(text='1', callback_data=f'set_level_1_{user_id}'))
    keyboard.add(InlineKeyboardButton(text='2', callback_data=f'set_level_2_{user_id}'))
    keyboard.add(InlineKeyboardButton(text='3', callback_data=f'set_level_3_{user_id}'))
    keyboard.add(InlineKeyboardButton(text='–ü–∞—Ä—Ç–Ω—ë—Ä', callback_data=f'set_level_4_{user_id}'))
    keyboard.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='admin_panel'))

    keyboard.adjust(1, 1, 1, 1, 1, 1)

    return keyboard.as_markup()

mailing_all_info = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–û—Ç–æ—Å–ª–∞—Ç—å', callback_data='mailing_confirmation')],
    [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data='change_message')],
    [InlineKeyboardButton(text='–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ', callback_data='attach_file')],
    [InlineKeyboardButton(text='–û—Ç–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ', callback_data='unpin_file')],
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='admin_panel')],
])

choice_for_mailing = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='mailing_all')],
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='mailing_all_info')],
])

back_in_history_profit =  InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='history_profit')],
])

back_in_history_replenishment =  InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='history_replenishment')],
])

back_in_history_withdrawal =  InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='history_withdrawal')],
])

back_in_profile =  InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='profile')],
])

back_in_admin_panel =  InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='admin_panel')],
])

back_in_orders =  InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='orders')],
])

back_in_mailing_all =  InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='mailing_all_info')],
])

back_in_main_menu =  InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='main_menu')],
])

back_in_all_levels =  InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='show_all_levels')],
])

only_shop =  InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ú–∞–≥–∞–∑–∏–Ω', callback_data='shop')],
])

subscription_verification = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ö–∞–Ω–∞–ª', url = CHANNEL_URL)],
    [InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='subscription_verification')],
])

select_currency = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üá∑üá∫ RUB', callback_data='selected_currency_RUB')],
    [InlineKeyboardButton(text='üá¨üáß USD', callback_data='selected_currency_USD')],
])

manager_url = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ú–µ–Ω–µ–¥–∂–µ—Ä', url=MANAGER_URL)],
])


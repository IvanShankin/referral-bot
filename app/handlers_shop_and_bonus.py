import sqlite3

from app.general_def import edit_or_answer_message, send_new_message

from datetime import datetime as dt
from aiogram import F,Bot, Router, types
from aiogram.types import CallbackQuery

import app.keyboards as kb # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Å–æ–∫—Ä–∞—â–∞–µ–º –µ—ë –Ω–∞ 'kb'

from config import TOKEN, CRYSTAL_API_LOGIN, CRYSTAL_API_SECRETKEY1, CRYSTAL_API_SECRETKEY2, CRYPTO_TOKEN

from crystalpay_sdk import CrystalPAY # –∫–∞—Å—Å–∞
crystalpayAPI = CrystalPAY(CRYSTAL_API_LOGIN, CRYSTAL_API_SECRETKEY1, CRYSTAL_API_SECRETKEY2)

from aiocryptopay import AioCryptoPay, Networks # –ö–ë
crypto = AioCryptoPay(token=CRYPTO_TOKEN, network=Networks.TEST_NET) # –ö–ë

router = Router() # —ç—Ç–æ –ø–æ—á—Ç–∏ –∫–∞–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è handlers

bot = Bot(token = TOKEN)


@router.callback_query(F.data == 'shop')
async def select_currency(callback: CallbackQuery):
    await edit_or_answer_message(chat_id=callback.from_user.id, message_id= callback.message.message_id,
                                text = f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',reply_markup = kb.shop)


@router.callback_query(F.data == 'show_all_levels')
async def select_currency(callback: CallbackQuery):
    await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                 text=f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∂–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å üëá', reply_markup=await kb.show_all_levels())


@router.callback_query(F.data.startswith('show_buy_level_'))
async def show_buy_level(callback: CallbackQuery):
    level = int(callback.data.split('_')[3])

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT emoji_level, prise, percent_one_level, percent_two_level, percent_three_level FROM levels WHERE level = ?",
                   (level,))
    level_info = cursor.fetchone()  # –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    connection.close()

    await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                 text=f'–£—Ä–æ–≤–µ–Ω—å:  {level_info[0]} {level}\n'
                                      f'–¶–µ–Ω–∞: {level_info[1]}\n'
                                      f'–ü—Ä–∏–±—ã–ª—å —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–µ—Ä–≤—ã–π —Å—Ç—É–ø–µ–Ω–∏: {level_info[2]}%\n'
                                      f'–ü—Ä–∏–±—ã–ª—å —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—É–ø–µ–Ω–∏: {level_info[3]}%\n'
                                      f'–ü—Ä–∏–±—ã–ª—å —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —Ç—Ä–µ—Ç—å–µ–π —Å—Ç—É–ø–µ–Ω–∏: {level_info[4]}%',
                                 reply_markup=await kb.buy_level(level, level_info[1]))


@router.callback_query(F.data.startswith('buy_level_'))
async def buy_level(callback: CallbackQuery):
    level = int(callback.data.split('_')[2])
    prise = int(callback.data.split('_')[3])

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT balance, withdrawal_balance, level  FROM users WHERE id = ?", (callback.from_user.id,))
    info_user = cursor.fetchone()  # –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    connection.close()

    if info_user[2] != 0:
        await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                     text=f'‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! \n–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å {info_user[2]} —É—Ä–æ–≤–µ–Ω—å' ,
                                     reply_markup=kb.back_in_all_levels)
        return

    if info_user[0] - info_user[1] < prise: # –µ—Å–ª–∏ –∏–º–µ—é—â–∏–π—Å—è –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ —Ü–µ–Ω—ã

        if info_user[1] == 0: # –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –≤—ã–≤–æ–¥–µ
            message_with_balance = f'–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {info_user[0]}'
        else:
            message_with_balance = (f'–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {info_user[0]}\n'
                                    f'–ù–æ —É –≤–∞—Å –µ—Å—Ç—å {info_user[1]} ‚ÇΩ –Ω–∞ –≤—ã–≤–æ–¥–µ\n'
                                    f'–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤–∞—à–∏ –∏–º–µ—é—â–∏–µ—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞ {info_user[0] - info_user[1]}')

        await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                     text=f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n'
                                          f'{message_with_balance}',
                                     reply_markup=kb.replenishment_or_back_main_menu)

    else:
        current_datetime = dt.now()
        formatted_time = current_datetime.strftime("%H:%M:%S %d-%m-%Y")

        new_balance = info_user[0] - prise # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å

        connection = sqlite3.connect('../working_file/data_base.sqlite3')
        cursor = connection.cursor()
        cursor.execute(f"UPDATE users SET balance = ?, level = ? WHERE id = ?",
                       (new_balance, level, callback.from_user.id))
        cursor.execute(f"INSERT INTO purchase_of_services (id_buyer, services, level, prise, date) VALUES (?, ?, ?, ?, ?)",
            (callback.from_user.id, 'buy_level', level, prise, formatted_time))
        connection.commit()

        cursor.execute(f"SELECT owner_id FROM users WHERE id = ?", (callback.from_user.id,))
        id_owner_this_referral = cursor.fetchone()

        if id_owner_this_referral[0]:  # —Ä–∞–±–æ—Ç–∞ –¥–ª—è –∫–æ–≥–æ –æ–Ω —è–≤–ª—è–µ—Ç—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª–ª–æ–º –ø–µ—Ä–≤–æ–π —Å—Ç—É–ø–µ–Ω–∏
            cursor.execute(f"SELECT owner_id, balance, level, total_earned, id, notifications_from_one_stage_referral  "
                           f"FROM users WHERE id = ?",
                           (id_owner_this_referral[0],))
            owner_one_stage = cursor.fetchone()
            if owner_one_stage[2] != 0:
                cursor.execute(f"SELECT percent_one_level FROM levels WHERE level = ?",(owner_one_stage[2],))
                info_level = cursor.fetchone()

                sum_accruals = (prise * info_level[0]) / 100 # —Å—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ —ç—Ç–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞

                cursor.execute(f"INSERT INTO profit_from_referrals (id_recipient, id_referral, sum, step_referral, return_percentage, date)"
                               f" VALUES (?, ?, ?, ?, ?, ?)",
                    (owner_one_stage[4], callback.from_user.id, sum_accruals, 1, info_level[0], formatted_time))

                new_balance = owner_one_stage[1] + sum_accruals

                new_total_earned = owner_one_stage[3] + sum_accruals

                cursor.execute(f"UPDATE users SET balance = ?, total_earned = ? WHERE id = ?",
                               (new_balance, new_total_earned, owner_one_stage[4]))

                if owner_one_stage[5] == 1: # –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—ç—Ç–æ –º–µ–Ω—è–µ—Ç—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
                    await send_new_message(owner_one_stage[4], f'üí∏ –†–µ—Ñ–µ—Ä–∞–ª –ø–µ—Ä–≤–æ–π —Å—Ç—É–ø–µ–Ω —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É \n\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ '
                                                                         f'{sum_accruals} ‚ÇΩ\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å = {new_balance} ‚ÇΩ')
            else:
                await send_new_message(owner_one_stage[4], f'üí∏ –û–¥–∏–Ω –∏–∑ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–µ—Ä–≤–æ–π —Å—Ç—É–ø–µ–Ω–∏ —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É, \n'
                                                                 f'–ø—Ä–∏–æ–±—Ä–µ—Ç—è —É—Ä–æ–≤–µ–Ω—å –≤—ã –º–æ–≥–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å —Å —ç—Ç–æ–π –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ—Ü–µ–Ω—Ç',
                                       reply_markup = kb.only_shop)

            if owner_one_stage[0]:# –µ—Å–ª–∏ —É —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—É–ø–µ–Ω–∏ –µ—Å—Ç—å –≤–ª–∞–¥–µ–ª–∏—Ü (—ç—Ç–æ –±—É–¥–µ—Ç 2 —Å—Ç—É–ø–µ–Ω—å)
                cursor.execute(f"SELECT owner_id, balance, level, total_earned, id, notifications_from_two_stage_referral"
                               f" FROM users WHERE id = ?",
                               (owner_one_stage[0],))
                owner_two_stage = cursor.fetchone()

                if owner_two_stage[2] != 0:
                    cursor.execute(f"SELECT percent_two_level FROM levels WHERE level = ?", (owner_two_stage[2],))
                    info_level = cursor.fetchone()

                    sum_accruals = (prise * info_level[0]) / 100  # —Å—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ —ç—Ç–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞

                    cursor.execute(
                        f"INSERT INTO profit_from_referrals (id_recipient, id_referral, sum, step_referral, return_percentage, date)"
                        f" VALUES (?, ?, ?, ?, ?, ?)",
                        (owner_two_stage[4], callback.from_user.id, sum_accruals, 2, info_level[0], formatted_time))

                    new_balance = owner_two_stage[1] + sum_accruals

                    new_total_earned = owner_two_stage[3] + sum_accruals

                    cursor.execute(f"UPDATE users SET balance = ?, total_earned = ? WHERE id = ?",
                                   (new_balance, new_total_earned, owner_two_stage[4]))

                    if owner_two_stage[5] == 1: # –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—ç—Ç–æ –º–µ–Ω—è–µ—Ç—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
                        await send_new_message(owner_two_stage[4],
                                               f'üí∏ –†–µ—Ñ–µ—Ä–∞–ª –≤—Ç–æ—Ä–æ–π —Å—Ç—É–ø–µ–Ω —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É \n\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ '
                                               f'{sum_accruals} ‚ÇΩ\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å = {new_balance} ‚ÇΩ')
                else:
                    await send_new_message(owner_two_stage[4],
                                           f'üí∏ –û–¥–∏–Ω –∏–∑ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤—Ç–æ—Ä–æ–π —Å—Ç—É–ø–µ–Ω–∏ —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É, \n'
                                           f'–ø—Ä–∏–æ–±—Ä–µ—Ç—è —É—Ä–æ–≤–µ–Ω—å –≤—ã –º–æ–≥–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å —Å —ç—Ç–æ–π –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ—Ü–µ–Ω—Ç',
                                           reply_markup=kb.only_shop)
                if owner_two_stage[0]: # –µ—Å–ª–∏ —É —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—É–ø–µ–Ω–∏ –µ—Å—Ç—å –≤–ª–∞–¥–µ–ª–∏—Ü (—ç—Ç–æ –±—É–¥–µ—Ç 3 —Å—Ç—É–ø–µ–Ω—å)
                    cursor.execute(f"SELECT owner_id, balance, level, total_earned, id, notifications_from_three_stage_referral"
                                   f" FROM users WHERE id = ?",
                                   (owner_two_stage[0],))
                    owner_three_stage = cursor.fetchone()

                    if owner_three_stage[2] != 0:
                        cursor.execute(f"SELECT percent_three_level FROM levels WHERE level = ?",
                                       (owner_three_stage[2],))
                        info_level = cursor.fetchone()

                        sum_accruals = (prise * info_level[0]) / 100  # —Å—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ —ç—Ç–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞

                        cursor.execute(
                            f"INSERT INTO profit_from_referrals (id_recipient, id_referral, sum, step_referral, return_percentage, date)"
                            f" VALUES (?, ?, ?, ?, ?, ?)",
                            (owner_three_stage[4], callback.from_user.id, sum_accruals, 3, info_level[0], formatted_time))

                        new_balance = owner_three_stage[1] + sum_accruals

                        new_total_earned = owner_three_stage[3] + sum_accruals

                        cursor.execute(f"UPDATE users SET balance = ?, total_earned = ? WHERE id = ?",
                                       (new_balance, new_total_earned, owner_three_stage[4]))

                        if owner_three_stage[5] == 1: # –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
                            await send_new_message(owner_three_stage[4],
                                                   f'üí∏ –†–µ—Ñ–µ—Ä–∞–ª —Ç—Ä–µ—Ç—å–µ–π —Å—Ç—É–ø–µ–Ω —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É \n\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ '
                                                   f'{sum_accruals} ‚ÇΩ\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å = {new_balance} ‚ÇΩ')
                    else:
                        await send_new_message(owner_three_stage[4],
                                               f'üí∏ –û–¥–∏–Ω –∏–∑ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Ç—Ä–µ—Ç—å–µ–π —Å—Ç—É–ø–µ–Ω–∏ —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É, \n'
                                               f'–ø—Ä–∏–æ–±—Ä–µ—Ç—è —É—Ä–æ–≤–µ–Ω—å –≤—ã –º–æ–≥–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å —Å —ç—Ç–æ–π –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ—Ü–µ–Ω—Ç',
                                               reply_markup=kb.only_shop)

        connection.commit()  # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        connection.close()



        await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                     text=f'üí∏ –£—Ä–æ–≤–µ–Ω—å {level} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω!',
                                     reply_markup=kb.back_in_main_menu)



@router.callback_query(F.data == 'improve')
async def improve(callback: CallbackQuery):
    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT level  FROM users WHERE id = ?", (callback.from_user.id,))
    level = cursor.fetchone()  # –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    connection.close()

    if level[0] == 0:
        await callback.answer('–î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —É—Ä–æ–≤–µ–Ω—å!', show_alert = True)
        return

    if level[0] == 3:
        await callback.answer('–£ –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!', show_alert= True)
        return

    await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                 text=f'–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è üëá',
                                 reply_markup=await kb.show_level_for_improve(level[0]))


@router.callback_query(F.data.startswith('show_level_for_improve|'))
async def show_level_for_improve(callback: CallbackQuery):
    level = int(callback.data.split('|')[1]) # –∂–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å
    prise = int(callback.data.split('|')[2]) # –µ–≥–æ —Ü–µ–Ω–∞ —Å —É—á—ë—Ç–æ–º —à—Ç—Ä–∞—Ñ–∞ –∑–∞ —É–ª—É—á—à–µ–Ω–∏–µ

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT percent_one_level, percent_two_level, percent_three_level, emoji_level  FROM levels WHERE level = ?",
                   (level,))
    level_info = cursor.fetchone()  # –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    connection.close()

    await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                     text=f'–£—Ä–æ–≤–µ–Ω—å:  {level_info[3]} {level}\n\n'
                                      f'–¶–µ–Ω–∞ —É–ª—É—á—à–µ–Ω–∏—è: {prise}\n'
                                      f'–ü—Ä–∏–±—ã–ª—å —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–µ—Ä–≤—ã–π —Å—Ç—É–ø–µ–Ω–∏: {level_info[0]}%\n'
                                      f'–ü—Ä–∏–±—ã–ª—å —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—É–ø–µ–Ω–∏: {level_info[1]}%\n'
                                      f'–ü—Ä–∏–±—ã–ª—å —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —Ç—Ä–µ—Ç—å–µ–π —Å—Ç—É–ø–µ–Ω–∏: {level_info[2]}%',
                                     reply_markup= await kb.buy_improve(level, prise) )

@router.callback_query(F.data.startswith('buy_improve_'))
async def buy_improve(callback: CallbackQuery):
    level = int(callback.data.split('_')[2])  # –∂–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å
    prise = int(callback.data.split('_')[3])  # –µ–≥–æ —Ü–µ–Ω–∞ —Å —É—á—ë—Ç–æ–º —à—Ç—Ä–∞—Ñ–∞ –∑–∞ —É–ª—É—á—à–µ–Ω–∏–µ

    connection = sqlite3.connect('../working_file/data_base.sqlite3')
    cursor = connection.cursor()
    cursor.execute(f"SELECT balance, withdrawal_balance, level FROM users WHERE id = ?",(callback.from_user.id,))
    info_user = cursor.fetchone()  # –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    connection.close()

    if info_user[2] >= level: # –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω —É—Ä–æ–≤–Ω—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
        await callback.answer(text=f'‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! \n\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è\n–£–ª—É—á—à–∏—Ç–µ –Ω–∞ –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å!',
                            show_alert = True)
        return

    if info_user[0] - info_user[1] < prise: # –µ—Å–ª–∏ –∏–º–µ—é—â–∏–π—Å—è –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ —Ü–µ–Ω—ã

        if info_user[1] == 0: # –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –≤—ã–≤–æ–¥–µ
            message_with_balance = f'–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {info_user[0]}'
        else:
            message_with_balance = (f'–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {info_user[0]}\n'
                                    f'–ù–æ —É –≤–∞—Å –µ—Å—Ç—å {info_user[1]} ‚ÇΩ –Ω–∞ –≤—ã–≤–æ–¥–µ\n'
                                    f'–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤–∞—à–∏ –∏–º–µ—é—â–∏–µ—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞ {info_user[0] - info_user[1]}')

        await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                     text=f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n'
                                          f'{message_with_balance}',
                                     reply_markup=kb.replenishment_or_back_main_menu)
    else:
        current_datetime = dt.now()
        formatted_time = current_datetime.strftime("%H:%M:%S %d-%m-%Y")

        new_balance = info_user[0] - prise  # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å

        connection = sqlite3.connect('../working_file/data_base.sqlite3')
        cursor = connection.cursor()
        cursor.execute(f"UPDATE users SET balance = ?, level = ? WHERE id = ?",
                       (new_balance, level, callback.from_user.id))
        cursor.execute(f"INSERT INTO purchase_of_services (id_buyer, services, level, prise, date) VALUES (?, ?, ?, ?, ?)",
            (callback.from_user.id, 'upgrade_level', level, prise, formatted_time))
        connection.commit()
        connection.close()

        await edit_or_answer_message(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                     text=f'üöÄ –£—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–µ–Ω –¥–æ {level}!',
                                     reply_markup=kb.back_in_main_menu)






